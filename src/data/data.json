
{
    "questions": [
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 9.902044293015333
                },
                {
                    "label": "Liechtenstein",
                    "number": 6.77052127022169
                },
                {
                    "label": "Niger",
                    "number": 5.196279275787608
                },
                {
                    "label": "Djibouti",
                    "number": 5.117045053523115
                },
                {
                    "label": "Brunei",
                    "number": 5.058350260883419
                },
                {
                    "label": "Iran",
                    "number": 4.707319379405168
                },
                {
                    "label": "Cameroon",
                    "number": 4.676760280605617
                },
                {
                    "label": "Aruba",
                    "number": 4.248704663212435
                },
                {
                    "label": "Germany",
                    "number": 4.1390257004355675
                },
                {
                    "label": "Russia",
                    "number": 4.0256333477721995
                }
            ],
            "answer": "Benin",
            "answerValue": 9.902044293015333,
            "question": "Which country was the most cooperative last year?",
            "rowIndex": 2,
            "approved": true,
            "params": {
                "codes": "('031', '030')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1000
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('031', '030') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('031', '030') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380821133,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 3.1232254400908577
                },
                {
                    "label": "Armenia",
                    "number": 2.7258907197399918
                },
                {
                    "label": "Niger",
                    "number": 1.9655611538674491
                },
                {
                    "label": "Cameroon",
                    "number": 1.7478801048728063
                },
                {
                    "label": "Chad",
                    "number": 1.622317116377944
                },
                {
                    "label": "Iceland",
                    "number": 0.9492732126965292
                },
                {
                    "label": "Belarus",
                    "number": 0.8028478376126638
                },
                {
                    "label": "Kazakhstan",
                    "number": 0.6802880668089798
                },
                {
                    "label": "Tajikistan",
                    "number": 0.6587072869493619
                },
                {
                    "label": "Kyrgyzstan",
                    "number": 0.5540848365449732
                }
            ],
            "answer": "Benin",
            "answerValue": 3.1232254400908577,
            "question": "Which country had the most cooperative military last year?",
            "rowIndex": 14,
            "approved": true,
            "params": {
                "codes": "('0312')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0312') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0312') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579334,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Ivory Coast",
                    "number": 4.214963119072708
                },
                {
                    "label": "Guatemala",
                    "number": 3.533434650455927
                },
                {
                    "label": "Guinea",
                    "number": 3.13275029369534
                },
                {
                    "label": "Burkina Faso",
                    "number": 1.882930822758903
                },
                {
                    "label": "Burundi",
                    "number": 1.8518518518518519
                },
                {
                    "label": "Togo",
                    "number": 1.6151361329026304
                },
                {
                    "label": "Moldova",
                    "number": 1.5611212923369306
                },
                {
                    "label": "Honduras",
                    "number": 1.442244657139111
                },
                {
                    "label": "Senegal",
                    "number": 1.2620950778291964
                },
                {
                    "label": "Antigua and Barbuda",
                    "number": 1.257183908045977
                }
            ],
            "answer": "Ivory Coast",
            "answerValue": 4.214963119072708,
            "question": "Which country called for leadership change the most last year?",
            "rowIndex": 8,
            "approved": true,
            "params": {
                "codes": "('0241')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0241') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0241') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579334,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Brazil",
                    "number": 1.5145035991732592
                },
                {
                    "label": "Grenada",
                    "number": 1.0334849111202977
                },
                {
                    "label": "Switzerland",
                    "number": 1.0259257471153382
                },
                {
                    "label": "Bangladesh",
                    "number": 0.9823012428999844
                },
                {
                    "label": "Zimbabwe",
                    "number": 0.6719131888160049
                },
                {
                    "label": "Lithuania",
                    "number": 0.6678242286630159
                },
                {
                    "label": "Chile",
                    "number": 0.5626828719333784
                },
                {
                    "label": "Chad",
                    "number": 0.5594196953027393
                },
                {
                    "label": "Rwanda",
                    "number": 0.41857642159017183
                },
                {
                    "label": "Nepal",
                    "number": 0.3581373277583289
                }
            ],
            "answer": "Brazil",
            "answerValue": 1.5145035991732592,
            "question": "Which country willingly shared the most intelligence last year?",
            "rowIndex": 16,
            "approved": true,
            "params": {
                "codes": "('0314')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 10000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0314') THEN 1 ELSE 0 END) * 10000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0314') THEN 1 ELSE 0 END) * 10000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 10,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579334,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 23417
                },
                {
                    "label": "Russia",
                    "number": 12478
                },
                {
                    "label": "Iran",
                    "number": 9178
                },
                {
                    "label": "Australia",
                    "number": 9086
                },
                {
                    "label": "United Kingdom",
                    "number": 8656
                },
                {
                    "label": "Canada",
                    "number": 8222
                },
                {
                    "label": "Japan",
                    "number": 7827
                },
                {
                    "label": "Vietnam",
                    "number": 5753
                },
                {
                    "label": "Turkey",
                    "number": 5575
                },
                {
                    "label": "Germany",
                    "number": 4834
                }
            ],
            "answer": "China",
            "answerValue": 23417,
            "question": "Which country, besides the United States, provided the most economic support to other countries last year?",
            "rowIndex": 17,
            "approved": true,
            "params": {
                "codes": "('061')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "filter_us": true
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('061') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \n  AND codes.country != 'United States'\nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('061') \n  AND codes.country != 'United States'\n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579150,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "United Kingdom",
                    "number": 149022
                },
                {
                    "label": "China",
                    "number": 130391
                },
                {
                    "label": "Iran",
                    "number": 114165
                },
                {
                    "label": "Russia",
                    "number": 110670
                },
                {
                    "label": "Canada",
                    "number": 105612
                },
                {
                    "label": "France",
                    "number": 105517
                },
                {
                    "label": "Israel",
                    "number": 86706
                },
                {
                    "label": "Cuba",
                    "number": 77880
                },
                {
                    "label": "Mexico",
                    "number": 75764
                },
                {
                    "label": "Iraq",
                    "number": 65609
                }
            ],
            "answer": "United Kingdom",
            "answerValue": 149022,
            "question": "Which country was mentioned the most with the United States in the news last year?",
            "rowIndex": 20,
            "approved": true,
            "params": {
                "country": "United States",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'United States' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'United States' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 761343835,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Haiti",
                    "number": 5.048683736025965
                },
                {
                    "label": "Macao",
                    "number": 4.424778761061947
                },
                {
                    "label": "Saint Vincent and the Grenadines",
                    "number": 3.693065244152647
                },
                {
                    "label": "Nepal",
                    "number": 3.6350938767470384
                },
                {
                    "label": "Malawi",
                    "number": 2.5800830987803245
                },
                {
                    "label": "Papua New Guinea",
                    "number": 2.320599785790789
                },
                {
                    "label": "Kiribati",
                    "number": 2.0667257159728374
                },
                {
                    "label": "Nicaragua",
                    "number": 2.0533880903490758
                },
                {
                    "label": "Tanzania",
                    "number": 2.0525287951855247
                },
                {
                    "label": "United States",
                    "number": 1.8773320109901808
                }
            ],
            "answer": "Haiti",
            "answerValue": 5.048683736025965,
            "question": "Which country appealed the most for economic aid last year?",
            "rowIndex": 9,
            "approved": true,
            "params": {
                "codes": "('0231')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0231') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0231') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579334,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Pakistan",
                    "number": 24921
                },
                {
                    "label": "United States",
                    "number": 10701
                },
                {
                    "label": "China",
                    "number": 7891
                },
                {
                    "label": "Bangladesh",
                    "number": 6902
                },
                {
                    "label": "United Kingdom",
                    "number": 6563
                },
                {
                    "label": "Nepal",
                    "number": 4800
                },
                {
                    "label": "Sri Lanka",
                    "number": 3572
                },
                {
                    "label": "Japan",
                    "number": 3026
                },
                {
                    "label": "France",
                    "number": 2890
                },
                {
                    "label": "Senegal",
                    "number": 2380
                }
            ],
            "answer": "Pakistan",
            "answerValue": 24921,
            "question": "Which country was mentioned with India the most in the news last year?",
            "rowIndex": 34,
            "approved": true,
            "params": {
                "country": "India",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'India' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'India' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 761318140,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Nevada",
                    "number": 1.487603305785124
                },
                {
                    "label": "Alabama",
                    "number": 1.150386948337168
                },
                {
                    "label": "New York",
                    "number": 1.0204081632653061
                },
                {
                    "label": "Pennsylvania",
                    "number": 1.006155303030303
                },
                {
                    "label": "Nebraska",
                    "number": 0.981675392670157
                },
                {
                    "label": "Illinois",
                    "number": 0.9424842919284678
                },
                {
                    "label": "Kansas",
                    "number": 0.8461668641056016
                },
                {
                    "label": "Kentucky",
                    "number": 0.8338044092707745
                },
                {
                    "label": "Wisconsin",
                    "number": 0.7640631920862248
                },
                {
                    "label": "North Dakota",
                    "number": 0.761307657859382
                }
            ],
            "answer": "Nevada",
            "answerValue": 1.487603305785124,
            "question": "Which state's subreddit talked about Obama the most in the past year?",
            "rowIndex": 63,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(obama|barack)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(obama|barack)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(obama|barack)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Nevada",
                    "number": 4.132231404958677
                },
                {
                    "label": "Indiana",
                    "number": 3.4480110582091843
                },
                {
                    "label": "Ohio",
                    "number": 3.2946635730858467
                },
                {
                    "label": "Iowa",
                    "number": 3.1592520954223082
                },
                {
                    "label": "Pennsylvania",
                    "number": 2.8172348484848486
                },
                {
                    "label": "New York",
                    "number": 2.1683673469387754
                },
                {
                    "label": "Wisconsin",
                    "number": 1.9968994537132734
                },
                {
                    "label": "South Carolina",
                    "number": 1.9457841343755198
                },
                {
                    "label": "North Dakota",
                    "number": 1.9256605463502015
                },
                {
                    "label": "Florida",
                    "number": 1.6951507572599693
                }
            ],
            "answer": "Nevada",
            "answerValue": 4.132231404958677,
            "question": "Which state's subreddit talked about Donald Trump the most in the past year?",
            "rowIndex": 67,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(trump|the donald)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(trump|the donald)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(trump|the donald)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Seattle",
                    "number": 2.07013113161729
                },
                {
                    "label": "Los Angeles",
                    "number": 2.009327966450079
                },
                {
                    "label": "Atlanta",
                    "number": 1.8245817459002815
                },
                {
                    "label": "Pittsburgh",
                    "number": 1.7225177868684514
                },
                {
                    "label": "Boston",
                    "number": 1.6950304128381002
                },
                {
                    "label": "Austin",
                    "number": 1.6140799764570761
                },
                {
                    "label": "Denver",
                    "number": 1.5895004720272545
                },
                {
                    "label": "San Diego",
                    "number": 1.4581608424625196
                },
                {
                    "label": "Houston",
                    "number": 1.4423202377930602
                },
                {
                    "label": "San Francisco",
                    "number": 1.3825753223174684
                }
            ],
            "answer": "Seattle",
            "answerValue": 2.07013113161729,
            "question": "Which city's subreddit discussed traffic the most?",
            "rowIndex": 153,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(traffic)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(traffic)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(traffic)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 532396361,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "New York",
                    "number": 4.464285714285714
                },
                {
                    "label": "Nevada",
                    "number": 4.132231404958677
                },
                {
                    "label": "Indiana",
                    "number": 2.7568729841806174
                },
                {
                    "label": "Pennsylvania",
                    "number": 2.1661931818181817
                },
                {
                    "label": "Mississippi",
                    "number": 1.8689128718083707
                },
                {
                    "label": "Ohio",
                    "number": 1.8561484918793503
                },
                {
                    "label": "Iowa",
                    "number": 1.7408123791102514
                },
                {
                    "label": "Missouri",
                    "number": 1.5316404675534059
                },
                {
                    "label": "South Carolina",
                    "number": 1.3969732246798603
                },
                {
                    "label": "Wisconsin",
                    "number": 1.3767901963679314
                }
            ],
            "answer": "New York",
            "answerValue": 4.464285714285714,
            "question": "Which state's subreddit talked about Hillary Clinton the most in the past year?",
            "rowIndex": 167,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(hillary|clinton)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(hillary|clinton)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(hillary|clinton)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Germany",
                    "number": 4071
                },
                {
                    "label": "Turkey",
                    "number": 2966
                },
                {
                    "label": "France",
                    "number": 2692
                },
                {
                    "label": "Russia",
                    "number": 2662
                },
                {
                    "label": "Poland",
                    "number": 1462
                },
                {
                    "label": "Greece",
                    "number": 1364
                },
                {
                    "label": "Spain",
                    "number": 1267
                },
                {
                    "label": "Scotland",
                    "number": 1117
                },
                {
                    "label": "Sweden",
                    "number": 890
                },
                {
                    "label": "Ukraine",
                    "number": 784
                }
            ],
            "answer": "Germany",
            "answerValue": 4071,
            "question": "Which country was mentioned the most in /r/europe in the past month? ",
            "rowIndex": 69,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "europe"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'europe') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'europe') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 67205616,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "South Dakota",
                    "number": 5.0
                },
                {
                    "label": "Kansas",
                    "number": 4.569301066170249
                },
                {
                    "label": "New Mexico",
                    "number": 3.7688442211055277
                },
                {
                    "label": "Massachusetts",
                    "number": 3.0748206354629315
                },
                {
                    "label": "West Virginia",
                    "number": 2.998800479808077
                },
                {
                    "label": "Oregon",
                    "number": 2.6751463759337777
                },
                {
                    "label": "Illinois",
                    "number": 2.416626389560174
                },
                {
                    "label": "North Carolina",
                    "number": 2.396215846144271
                },
                {
                    "label": "Wisconsin",
                    "number": 2.067030857817806
                },
                {
                    "label": "Tennessee",
                    "number": 2.04029584289722
                }
            ],
            "answer": "South Dakota",
            "answerValue": 5.0,
            "question": "Which state's subreddit discussed unemployment the most in the past year?",
            "rowIndex": 185,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(unemployment|unemployed)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(unemployment|unemployed)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(unemployment|unemployed)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "San Francisco",
                    "number": 6.402684255280032
                },
                {
                    "label": "Vancouver",
                    "number": 3.063870383809392
                },
                {
                    "label": "New York City",
                    "number": 1.5567301426399247
                },
                {
                    "label": "Montreal",
                    "number": 1.5528736602244915
                },
                {
                    "label": "San Diego",
                    "number": 1.3274669330724016
                },
                {
                    "label": "Los Angeles",
                    "number": 1.2894715828263679
                },
                {
                    "label": "Denver",
                    "number": 1.221113984320486
                },
                {
                    "label": "Seattle",
                    "number": 1.1869839728023313
                },
                {
                    "label": "Chicago",
                    "number": 1.1694226744901728
                },
                {
                    "label": "Portland",
                    "number": 1.1626110321800183
                }
            ],
            "answer": "San Francisco",
            "answerValue": 6.402684255280032,
            "question": "Which city's subreddit talked about Airbnb the most?",
            "rowIndex": 190,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(airbnb)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 532396361,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Texas",
                    "number": 2.0339258837407965
                },
                {
                    "label": "Indiana",
                    "number": 1.8430348640761787
                },
                {
                    "label": "Iowa",
                    "number": 1.3969482054588438
                },
                {
                    "label": "Ohio",
                    "number": 1.2064965197215778
                },
                {
                    "label": "New York",
                    "number": 0.8503401360544217
                },
                {
                    "label": "Illinois",
                    "number": 0.7249879168680522
                },
                {
                    "label": "Idaho",
                    "number": 0.7140307033202428
                },
                {
                    "label": "Kentucky",
                    "number": 0.7066139061616733
                },
                {
                    "label": "Kansas",
                    "number": 0.6769334912844813
                },
                {
                    "label": "Wisconsin",
                    "number": 0.6274915104089768
                }
            ],
            "answer": "Texas",
            "answerValue": 2.0339258837407965,
            "question": "Which state's subreddit talked about Ted Cruz the most in the past year?",
            "rowIndex": 215,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(ted cruz)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ted cruz)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ted cruz)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Nevada",
                    "number": 5.785123966942149
                },
                {
                    "label": "New York",
                    "number": 5.48469387755102
                },
                {
                    "label": "Nebraska",
                    "number": 3.6649214659685865
                },
                {
                    "label": "South Carolina",
                    "number": 2.51122567769832
                },
                {
                    "label": "Indiana",
                    "number": 2.319152203962525
                },
                {
                    "label": "Vermont",
                    "number": 1.9527664190937162
                },
                {
                    "label": "Iowa",
                    "number": 1.730066623683645
                },
                {
                    "label": "North Dakota",
                    "number": 1.567398119122257
                },
                {
                    "label": "South Dakota",
                    "number": 1.5
                },
                {
                    "label": "Wisconsin",
                    "number": 1.4949062453860917
                }
            ],
            "answer": "Nevada",
            "answerValue": 5.785123966942149,
            "question": "Which state's subreddit talked about Bernie Sanders the most in the past year?",
            "rowIndex": 216,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(bernie|sanders|#?feelthebern)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(bernie|sanders|#?feelthebern)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(bernie|sanders|#?feelthebern)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Ohio",
                    "number": 2.6542923433874708
                },
                {
                    "label": "New York",
                    "number": 0.3826530612244898
                },
                {
                    "label": "Indiana",
                    "number": 0.2380586699431731
                },
                {
                    "label": "Wisconsin",
                    "number": 0.2140853388454156
                },
                {
                    "label": "Rhode Island",
                    "number": 0.12302284710017575
                },
                {
                    "label": "Idaho",
                    "number": 0.10710460549803641
                },
                {
                    "label": "Pennsylvania",
                    "number": 0.10653409090909091
                },
                {
                    "label": "Illinois",
                    "number": 0.09666505558240696
                },
                {
                    "label": "Maryland",
                    "number": 0.0735775016350556
                },
                {
                    "label": "Arizona",
                    "number": 0.0704163365900889
                }
            ],
            "answer": "Ohio",
            "answerValue": 2.6542923433874708,
            "question": "Which state's subreddit talked about John Kasich the most in the past year?",
            "rowIndex": 218,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(kasich)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(kasich)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(kasich)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "United States",
                    "number": 130391
                },
                {
                    "label": "Japan",
                    "number": 50766
                },
                {
                    "label": "Russia",
                    "number": 49032
                },
                {
                    "label": "United Kingdom",
                    "number": 38336
                },
                {
                    "label": "Pakistan",
                    "number": 28792
                },
                {
                    "label": "Taiwan",
                    "number": 26695
                },
                {
                    "label": "Australia",
                    "number": 23580
                },
                {
                    "label": "France",
                    "number": 23247
                },
                {
                    "label": "South Korea",
                    "number": 23030
                },
                {
                    "label": "Philippines",
                    "number": 21827
                }
            ],
            "answer": "United States",
            "answerValue": 130391,
            "question": "Which country was mentioned with China the most in the news last year?",
            "rowIndex": 265,
            "approved": true,
            "params": {
                "country": "China",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'China' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'China' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 761334193,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "South Korea",
                    "number": 30325
                },
                {
                    "label": "United States",
                    "number": 14031
                },
                {
                    "label": "China",
                    "number": 13139
                },
                {
                    "label": "Russia",
                    "number": 4935
                },
                {
                    "label": "Japan",
                    "number": 4471
                },
                {
                    "label": "Iran",
                    "number": 3480
                },
                {
                    "label": "Canada",
                    "number": 1662
                },
                {
                    "label": "United Kingdom",
                    "number": 794
                },
                {
                    "label": "Cuba",
                    "number": 634
                },
                {
                    "label": "Pakistan",
                    "number": 521
                }
            ],
            "answer": "South Korea",
            "answerValue": 30325,
            "question": "Which country was mentioned with North Korea the most in the news last year?",
            "rowIndex": 264,
            "approved": true,
            "params": {
                "country": "North Korea",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'North Korea' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'North Korea' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 761310688,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Nauru",
                    "number": 3.2658615410784146
                },
                {
                    "label": "Vanuatu",
                    "number": 2.6450387257051
                },
                {
                    "label": "Botswana",
                    "number": 2.598360300177851
                },
                {
                    "label": "Zambia",
                    "number": 2.5912817364296292
                },
                {
                    "label": "Burundi",
                    "number": 2.5105820105820107
                },
                {
                    "label": "Estonia",
                    "number": 2.417841400078558
                },
                {
                    "label": "Ghana",
                    "number": 2.385139680198397
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 2.261221734728316
                },
                {
                    "label": "Australia",
                    "number": 2.2519541458972445
                },
                {
                    "label": "New Zealand",
                    "number": 2.242261051489675
                }
            ],
            "answer": "Nauru",
            "answerValue": 3.2658615410784146,
            "question": "Officials of which country made the most pessimistic statements last year?",
            "rowIndex": 291,
            "approved": true,
            "params": {
                "codes": "('012')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('012') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('012') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380821141,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Antigua and Barbuda",
                    "number": 3.7137191274562826
                },
                {
                    "label": "Luxembourg",
                    "number": 3.6345156315715688
                },
                {
                    "label": "Georgia",
                    "number": 3.5460992907801416
                },
                {
                    "label": "Comoros",
                    "number": 3.4870641169853767
                },
                {
                    "label": "Papua New Guinea",
                    "number": 3.439406627587032
                },
                {
                    "label": "Anguilla",
                    "number": 3.4033309196234613
                },
                {
                    "label": "Madagascar",
                    "number": 3.1140350877192984
                },
                {
                    "label": "Cook Islands",
                    "number": 3.056768558951965
                },
                {
                    "label": "Trinidad and Tobago",
                    "number": 3.055904522613065
                },
                {
                    "label": "Burkina Faso",
                    "number": 2.9885057471264367
                }
            ],
            "answer": "Antigua and Barbuda",
            "answerValue": 3.7137191274562826,
            "question": "Officials of which country made the most optimistic statements last year?",
            "rowIndex": 292,
            "approved": true,
            "params": {
                "codes": "('013')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('013') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('013') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380821141,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 4.081487791027825
                },
                {
                    "label": "Moldova",
                    "number": 2.6063938098147017
                },
                {
                    "label": "Niger",
                    "number": 2.569071479984497
                },
                {
                    "label": "Burkina Faso",
                    "number": 2.275890298812935
                },
                {
                    "label": "Cameroon",
                    "number": 2.1446961286817676
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 2.0587242659466756
                },
                {
                    "label": "Georgia",
                    "number": 1.9114688128772637
                },
                {
                    "label": "Zambia",
                    "number": 1.890642493408935
                },
                {
                    "label": "Swaziland",
                    "number": 1.8167184086466597
                },
                {
                    "label": "India",
                    "number": 1.7787682803144238
                }
            ],
            "answer": "Benin",
            "answerValue": 4.081487791027825,
            "question": "Which country made the most demands for economic, military and/or humanitarian aid?",
            "rowIndex": 305,
            "approved": true,
            "params": {
                "codes": "('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380821141,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Turkey",
                    "number": 12164
                },
                {
                    "label": "China",
                    "number": 6875
                },
                {
                    "label": "Russia",
                    "number": 6850
                },
                {
                    "label": "Germany",
                    "number": 6283
                },
                {
                    "label": "Israel",
                    "number": 4902
                },
                {
                    "label": "France",
                    "number": 4785
                },
                {
                    "label": "Iraq",
                    "number": 4302
                },
                {
                    "label": "Syria",
                    "number": 2988
                },
                {
                    "label": "India",
                    "number": 2432
                },
                {
                    "label": "Iran",
                    "number": 2296
                }
            ],
            "answer": "Turkey",
            "answerValue": 12164,
            "question": "Which country was mentioned in /r/worldnews the most in the past month?",
            "rowIndex": 71,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "worldnews"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'worldnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'worldnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 67930916,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Germany",
                    "number": 1477
                },
                {
                    "label": "France",
                    "number": 1015
                },
                {
                    "label": "Iraq",
                    "number": 998
                },
                {
                    "label": "Turkey",
                    "number": 978
                },
                {
                    "label": "Canada",
                    "number": 940
                },
                {
                    "label": "China",
                    "number": 779
                },
                {
                    "label": "Russia",
                    "number": 716
                },
                {
                    "label": "Israel",
                    "number": 559
                },
                {
                    "label": "Mexico",
                    "number": 504
                },
                {
                    "label": "Syria",
                    "number": 489
                }
            ],
            "answer": "Germany",
            "answerValue": 1477,
            "question": "Which country was mentioned in /r/news the most in the past month?",
            "rowIndex": 70,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "news"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 67760357,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Mexico",
                    "number": 156
                },
                {
                    "label": "Thailand",
                    "number": 154
                },
                {
                    "label": "Italy",
                    "number": 139
                },
                {
                    "label": "Germany",
                    "number": 130
                },
                {
                    "label": "Canada",
                    "number": 127
                },
                {
                    "label": "Japan",
                    "number": 115
                },
                {
                    "label": "China",
                    "number": 114
                },
                {
                    "label": "Spain",
                    "number": 97
                },
                {
                    "label": "Iceland",
                    "number": 94
                },
                {
                    "label": "France",
                    "number": 85
                }
            ],
            "answer": "Mexico",
            "answerValue": 156,
            "question": "Which country was discussed the most in /r/travel in the past month?",
            "rowIndex": 59,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "travel"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 67003448,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 26
                },
                {
                    "label": "Venezuela",
                    "number": 11
                },
                {
                    "label": "Canada",
                    "number": 8
                },
                {
                    "label": "Germany",
                    "number": 8
                },
                {
                    "label": "Greece",
                    "number": 4
                },
                {
                    "label": "Philippines",
                    "number": 3
                },
                {
                    "label": "Iran",
                    "number": 3
                },
                {
                    "label": "India",
                    "number": 3
                },
                {
                    "label": "England",
                    "number": 3
                },
                {
                    "label": "Spain",
                    "number": 3
                }
            ],
            "answer": "China",
            "answerValue": 26,
            "question": "What country was mentioned the most in /r/economy?\n",
            "rowIndex": 356,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "economy"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'economy') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'economy') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 66978038,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Northern Ireland",
                    "number": 9.275732554780044
                },
                {
                    "label": "Ireland",
                    "number": 3.3050261626880206
                },
                {
                    "label": "Spain",
                    "number": 3.0110677083333335
                },
                {
                    "label": "Polska",
                    "number": 2.3497089975779923
                },
                {
                    "label": "Norway",
                    "number": 2.144607843137255
                },
                {
                    "label": "Switzerland",
                    "number": 2.04648443210057
                },
                {
                    "label": "Poland",
                    "number": 1.9843342036553524
                },
                {
                    "label": "Italy",
                    "number": 1.8520973540352328
                },
                {
                    "label": "Iceland",
                    "number": 1.8433765573353673
                },
                {
                    "label": "Germany",
                    "number": 1.8241739532281798
                }
            ],
            "answer": "Northern Ireland",
            "answerValue": 9.275732554780044,
            "question": "Other than the United Kingdom, which country's subreddit mentions “Brexit” the most?",
            "rowIndex": 357,
            "approved": true,
            "params": {
                "term": "brexit",
                "per": 1000,
                "filter_country": "United Kingdom"
            },
            "sql": "\n    SELECT\n      countries.country AS country,\n      SUM(CASE WHEN comments.body CONTAINS 'brexit' THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\n    FROM (\n      SELECT\n        *\n      FROM\n        TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"2016\")')) comments\n    JOIN\n      [subreddits.european_countries] countries\n    ON\n      countries.subreddit = comments.subreddit\n    \n        WHERE country != 'United Kingdom'\n    GROUP BY\n      country\n    ORDER BY\n      per DESC IGNORE CASE\n",
            "inputSQL": "\n    SELECT\n      countries.country AS country,\n      SUM(CASE WHEN comments.body CONTAINS 'brexit' THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\n    FROM (\n      SELECT\n        *\n      FROM\n        TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"2016\")')) comments\n    JOIN\n      [subreddits.european_countries] countries\n    ON\n      countries.subreddit = comments.subreddit\n    \n        WHERE country != 'United Kingdom' AND country = 'userInput'\n    GROUP BY\n      country\n    ORDER BY\n      per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 517221839,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Apple",
                    "number": 116
                },
                {
                    "label": "Google",
                    "number": 98
                },
                {
                    "label": "Facebook",
                    "number": 59
                },
                {
                    "label": "Walmart",
                    "number": 37
                },
                {
                    "label": "Target",
                    "number": 21
                },
                {
                    "label": "Netflix",
                    "number": 18
                },
                {
                    "label": "Visa",
                    "number": 17
                },
                {
                    "label": "Comcast",
                    "number": 17
                },
                {
                    "label": "Gap",
                    "number": 16
                },
                {
                    "label": "Aetna",
                    "number": 13
                }
            ],
            "answer": "Apple",
            "answerValue": 116,
            "question": "Which Fortune 500 company was mentioned the most in /r/business in the past month?",
            "rowIndex": 365,
            "approved": true,
            "params": {
                "wikidata_tag": "fortune_500",
                "subreddit": "business",
                "num_common_words": 0,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.fortune_500] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      0) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.fortune_500]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69665828,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Go",
                    "number": 659
                },
                {
                    "label": "LESS",
                    "number": 586
                },
                {
                    "label": "JavaScript",
                    "number": 383
                },
                {
                    "label": "HTML",
                    "number": 298
                },
                {
                    "label": "PHP",
                    "number": 280
                },
                {
                    "label": "SMALL",
                    "number": 255
                },
                {
                    "label": "BASIC",
                    "number": 239
                },
                {
                    "label": "Cool",
                    "number": 136
                },
                {
                    "label": "FACT",
                    "number": 126
                },
                {
                    "label": "Java",
                    "number": 98
                }
            ],
            "answer": "Go",
            "answerValue": 659,
            "question": "Which programming language was mentioned the most in /r/webdev in the past month?",
            "rowIndex": 364,
            "approved": true,
            "params": {
                "wikidata_tag": "programming_languages",
                "subreddit": "webdev",
                "num_common_words": 0,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.programming_languages] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'webdev') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      0) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.programming_languages]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'webdev') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69674897,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "New York",
                    "number": 5.9523809523809526
                },
                {
                    "label": "New Mexico",
                    "number": 2.0938023450586263
                },
                {
                    "label": "South Dakota",
                    "number": 2
                },
                {
                    "label": "Hawaii",
                    "number": 1.9325005176340673
                },
                {
                    "label": "Massachusetts",
                    "number": 1.5374103177314657
                },
                {
                    "label": "Tennessee",
                    "number": 1.530221882172915
                },
                {
                    "label": "Montana",
                    "number": 1.013787510137875
                },
                {
                    "label": "Maine",
                    "number": 0.9542812527110263
                },
                {
                    "label": "California",
                    "number": 0.9331350421368793
                },
                {
                    "label": "Wyoming",
                    "number": 0.8003201280512204
                }
            ],
            "answer": "New York",
            "answerValue": 5.9523809523809526,
            "question": "Which state's subreddit talked about Airbnb the most in the past year?\n",
            "rowIndex": 366,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(airbnb)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "New York",
                    "number": 5.9523809523809526
                },
                {
                    "label": "New Jersey",
                    "number": 5.019791291831594
                },
                {
                    "label": "Massachusetts",
                    "number": 4.099760847283909
                },
                {
                    "label": "Hawaii",
                    "number": 3.4854027193043
                },
                {
                    "label": "Delaware",
                    "number": 2.825488883931891
                },
                {
                    "label": "Montana",
                    "number": 2.635847526358475
                },
                {
                    "label": "Florida",
                    "number": 2.570515492566347
                },
                {
                    "label": "Texas",
                    "number": 2.5424073546759955
                },
                {
                    "label": "Connecticut",
                    "number": 2.325789426603453
                },
                {
                    "label": "Pennsylvania",
                    "number": 2.1306818181818183
                }
            ],
            "answer": "New York",
            "answerValue": 5.9523809523809526,
            "question": "Which state's subreddit talked about Lyft and Uber the most in the past year?",
            "rowIndex": 367,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(lyft|uber)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(lyft|uber)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(lyft|uber)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Hawaii",
                    "number": 2.6571882117468424
                },
                {
                    "label": "Mississippi",
                    "number": 2.1058173203474597
                },
                {
                    "label": "Nevada",
                    "number": 1.6528925619834711
                },
                {
                    "label": "Rhode Island",
                    "number": 1.40597539543058
                },
                {
                    "label": "New York",
                    "number": 1.2755102040816326
                },
                {
                    "label": "New Mexico",
                    "number": 1.256281407035176
                },
                {
                    "label": "California",
                    "number": 1.1955792727378765
                },
                {
                    "label": "Utah",
                    "number": 1.1529592621060722
                },
                {
                    "label": "South Dakota",
                    "number": 1
                },
                {
                    "label": "New Jersey",
                    "number": 0.8276358402302987
                }
            ],
            "answer": "Hawaii",
            "answerValue": 2.6571882117468424,
            "question": "Which state’s subreddit talked about Yelp the most in the past year?",
            "rowIndex": 368,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(yelp)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(yelp)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(yelp)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Kansas",
                    "number": 4.281604332374344
                },
                {
                    "label": "Nevada",
                    "number": 2.809917355371901
                },
                {
                    "label": "North Carolina",
                    "number": 2.7074127092798905
                },
                {
                    "label": "Wisconsin",
                    "number": 2.690831241694965
                },
                {
                    "label": "Illinois",
                    "number": 2.5374577090381827
                },
                {
                    "label": "Pennsylvania",
                    "number": 2.509469696969697
                },
                {
                    "label": "Indiana",
                    "number": 2.4420211949009367
                },
                {
                    "label": "Kentucky",
                    "number": 2.3035613340870547
                },
                {
                    "label": "Ohio",
                    "number": 2.2552204176334105
                },
                {
                    "label": "Missouri",
                    "number": 1.9347037484885128
                }
            ],
            "answer": "Kansas",
            "answerValue": 4.281604332374344,
            "question": "Which state’s subreddit talked about Republicans the most in the past year?",
            "rowIndex": 369,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(republican|republicans)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(republican|republicans)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(republican|republicans)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Illinois",
                    "number": 2.6341227646205896
                },
                {
                    "label": "Kansas",
                    "number": 1.7092570654933152
                },
                {
                    "label": "North Carolina",
                    "number": 1.618223688305222
                },
                {
                    "label": "Pennsylvania",
                    "number": 1.4914772727272727
                },
                {
                    "label": "Maryland",
                    "number": 1.381621975147155
                },
                {
                    "label": "New York",
                    "number": 1.3180272108843538
                },
                {
                    "label": "Kentucky",
                    "number": 1.3143018654607124
                },
                {
                    "label": "Wisconsin",
                    "number": 1.3029676657315812
                },
                {
                    "label": "North Dakota",
                    "number": 1.2987012987012987
                },
                {
                    "label": "Indiana",
                    "number": 1.2594071571187222
                }
            ],
            "answer": "Illinois",
            "answerValue": 2.6341227646205896,
            "question": "Which state’s subreddit talked about Democrats the most in the past year?",
            "rowIndex": 370,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(democrat|democrats)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(democrat|democrats)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(democrat|democrats)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Vermont",
                    "number": 6.676124509722106
                },
                {
                    "label": "Maryland",
                    "number": 4.905166775670373
                },
                {
                    "label": "Virginia",
                    "number": 4.523863379325944
                },
                {
                    "label": "Wyoming",
                    "number": 4.001600640256102
                },
                {
                    "label": "Delaware",
                    "number": 3.71774853148933
                },
                {
                    "label": "Rhode Island",
                    "number": 3.51493848857645
                },
                {
                    "label": "Hawaii",
                    "number": 3.450893781489406
                },
                {
                    "label": "New Jersey",
                    "number": 3.0586541921554518
                },
                {
                    "label": "Washington",
                    "number": 2.8612303290414878
                },
                {
                    "label": "Ohio",
                    "number": 2.7842227378190256
                }
            ],
            "answer": "Vermont",
            "answerValue": 6.676124509722106,
            "question": "Which state’s subreddit talked about telecommuting the most in the past year?",
            "rowIndex": 376,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(telecommuting|telecommute|work+from+home|WFH)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(telecommuting|telecommute|work+from+home|WFH)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(telecommuting|telecommute|work+from+home|WFH)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Cayman Islands",
                    "number": 4.837604494997945
                },
                {
                    "label": "Luxembourg",
                    "number": 2.9988789237668163
                },
                {
                    "label": "Norway",
                    "number": 2.9973059508864974
                },
                {
                    "label": "Mauritius",
                    "number": 2.858627858627859
                },
                {
                    "label": "Liechtenstein",
                    "number": 2.85335102853351
                },
                {
                    "label": "Macao",
                    "number": 2.490170380078637
                },
                {
                    "label": "Qatar",
                    "number": 2.4623386684004482
                },
                {
                    "label": "Malawi",
                    "number": 2.4
                },
                {
                    "label": "Cook Islands",
                    "number": 2.3488640739314595
                },
                {
                    "label": "New Zealand",
                    "number": 2.2295645815419407
                }
            ],
            "answer": "Cayman Islands",
            "answerValue": 4.837604494997945,
            "question": "Which country provided the most proportional economic aid so far this year?",
            "rowIndex": 379,
            "approved": true,
            "params": {
                "codes": "('071')",
                "relation": "Actor1CountryCode",
                "year": 2016,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('071') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2016\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('071') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2016\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 408734760,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Indian Institutes of Management",
                    "number": 22284
                },
                {
                    "label": "Harvard Business School",
                    "number": 17602
                },
                {
                    "label": "INSEAD",
                    "number": 16344
                },
                {
                    "label": "MIT Sloan School of Management",
                    "number": 11518
                },
                {
                    "label": "London Business School",
                    "number": 9732
                },
                {
                    "label": "Hult International Business School",
                    "number": 7219
                },
                {
                    "label": "Moore School of Business",
                    "number": 6240
                },
                {
                    "label": "KEDGE Business School",
                    "number": 5343
                },
                {
                    "label": "Pentacle",
                    "number": 5284
                },
                {
                    "label": "Columbia Business School",
                    "number": 4879
                }
            ],
            "answer": "Indian Institutes of Management",
            "answerValue": 22284,
            "question": "Which business school had the most popular page in the past month?",
            "rowIndex": 351,
            "approved": true,
            "params": {
                "wikidata_tag": "business_schools_clean",
                "substring": true
            },
            "sql": "\n  SELECT\n    replace(school.name, \"_\", \" \") AS name,\n    SUM(requests) AS total\n  FROM\n    [wikidata_tags.business_schools_clean] school\n  JOIN EACH (\n    SELECT\n      title,\n      requests\n    FROM\n      [fh-bigquery:wikipedia.pagecounts_201606]) views\n  ON\n    views.title = name\n  GROUP BY\n    name\n  ORDER BY\n    total DESC IGNORE case\n",
            "inputSQL": "\n   SELECT\n      replace(school.name, \"_\", \" \") AS name,\n      SUM(requests) AS total\n    FROM\n      [wikidata_tags.business_schools_clean] school\n    JOIN EACH (\n      SELECT\n        title,\n        requests\n      FROM\n        [fh-bigquery:wikipedia.pagecounts_201606]\n      WHERE\n        title = 'userInput'\nOR title CONTAINS CONCAT('_', replace('userInput', ' ', '_' ))\nOR title CONTAINS CONCAT(replace('userInput', ' ', '_' ), '_')\n ) views\n    ON\n      views.title = name\n    GROUP BY\n      name\n    ORDER BY\n      total DESC IGNORE case\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 9908461706,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Volbeat",
                    "number": 123023
                },
                {
                    "label": "Golem",
                    "number": 47092
                },
                {
                    "label": "Pikachu",
                    "number": 30867
                },
                {
                    "label": "Altaria",
                    "number": 25816
                },
                {
                    "label": "Electrode",
                    "number": 12101
                },
                {
                    "label": "MissingNo",
                    "number": 10207
                },
                {
                    "label": "Mewtwo",
                    "number": 9844
                },
                {
                    "label": "Dragonair",
                    "number": 9165
                },
                {
                    "label": "Klang",
                    "number": 7703
                },
                {
                    "label": "Kabuto",
                    "number": 6233
                }
            ],
            "answer": "Volbeat",
            "answerValue": 123023,
            "question": "What was the most popular Pokemon species in the past month?",
            "rowIndex": 355,
            "approved": true,
            "params": {
                "wikidata_tag": "pokemon_species",
                "substring": true
            },
            "sql": "\n  SELECT\n    replace(school.name, \"_\", \" \") AS name,\n    SUM(requests) AS total\n  FROM\n    [wikidata_tags.pokemon_species] school\n  JOIN EACH (\n    SELECT\n      title,\n      requests\n    FROM\n      [fh-bigquery:wikipedia.pagecounts_201606]) views\n  ON\n    views.title = name\n  GROUP BY\n    name\n  ORDER BY\n    total DESC IGNORE case\n",
            "inputSQL": "\n   SELECT\n      replace(school.name, \"_\", \" \") AS name,\n      SUM(requests) AS total\n    FROM\n      [wikidata_tags.pokemon_species] school\n    JOIN EACH (\n      SELECT\n        title,\n        requests\n      FROM\n        [fh-bigquery:wikipedia.pagecounts_201606]\n      WHERE\n        title = 'userInput'\nOR title CONTAINS CONCAT('_', replace('userInput', ' ', '_' ))\nOR title CONTAINS CONCAT(replace('userInput', ' ', '_' ), '_')\n ) views\n    ON\n      views.title = name\n    GROUP BY\n      name\n    ORDER BY\n      total DESC IGNORE case\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 9908462114,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Chad",
                    "number": 9.825865928145983
                },
                {
                    "label": "Iraq",
                    "number": 9.012279995398597
                },
                {
                    "label": "Benin",
                    "number": 8.602921408728381
                },
                {
                    "label": "Niger",
                    "number": 8.10703554623278
                },
                {
                    "label": "Lithuania",
                    "number": 7.912133673416272
                },
                {
                    "label": "Saudi Arabia",
                    "number": 7.860108009240857
                },
                {
                    "label": "Cameroon",
                    "number": 6.648808954367167
                },
                {
                    "label": "Afghanistan",
                    "number": 6.605892456070815
                },
                {
                    "label": "Djibouti",
                    "number": 6.104699782572337
                },
                {
                    "label": "Czech Republic",
                    "number": 6.103320496984669
                }
            ],
            "answer": "Chad",
            "answerValue": 9.825865928145983,
            "question": "Which country provided the most proportional military aid so far this year?",
            "rowIndex": 380,
            "approved": true,
            "params": {
                "codes": "('072')",
                "relation": "Actor1CountryCode",
                "year": 2016,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('072') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2016\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('072') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2016\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 408734760,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Apple",
                    "number": 344
                },
                {
                    "label": "Google",
                    "number": 292
                },
                {
                    "label": "Target",
                    "number": 125
                },
                {
                    "label": "Facebook",
                    "number": 53
                },
                {
                    "label": "Microsoft",
                    "number": 52
                },
                {
                    "label": "Starbucks",
                    "number": 28
                },
                {
                    "label": "UPS",
                    "number": 26
                },
                {
                    "label": "Netflix",
                    "number": 25
                },
                {
                    "label": "Ball",
                    "number": 24
                },
                {
                    "label": "Disney",
                    "number": 22
                }
            ],
            "answer": "Apple",
            "answerValue": 344,
            "question": "What Fortune 500 company was mentioned the most in /r/investing in the past year?",
            "rowIndex": 378,
            "approved": true,
            "params": {
                "wikidata_tag": "fortune_500",
                "subreddit": "investing",
                "num_common_words": 500,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.fortune_500] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'investing') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      500) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.fortune_500]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'investing') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69691493,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Israel",
                    "number": 290
                },
                {
                    "label": "Russia",
                    "number": 161
                },
                {
                    "label": "Iraq",
                    "number": 73
                },
                {
                    "label": "Turkey",
                    "number": 70
                },
                {
                    "label": "Syria",
                    "number": 54
                },
                {
                    "label": "Germany",
                    "number": 51
                },
                {
                    "label": "China",
                    "number": 50
                },
                {
                    "label": "France",
                    "number": 44
                },
                {
                    "label": "Iran",
                    "number": 43
                },
                {
                    "label": "Ukraine",
                    "number": 28
                }
            ],
            "answer": "Israel",
            "answerValue": 290,
            "question": "Which country was mentioned the most in /r/worldpolitics in the past month?",
            "rowIndex": 384,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "worldpolitics"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'worldpolitics') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'worldpolitics') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 66991370,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "NBC",
                    "number": 1369
                },
                {
                    "label": "HBO",
                    "number": 625
                },
                {
                    "label": "Fox",
                    "number": 518
                },
                {
                    "label": "CNN",
                    "number": 459
                },
                {
                    "label": "Comedy Central",
                    "number": 333
                },
                {
                    "label": "BET",
                    "number": 321
                },
                {
                    "label": "MTV",
                    "number": 290
                },
                {
                    "label": "CBS",
                    "number": 260
                },
                {
                    "label": "Pop",
                    "number": 238
                },
                {
                    "label": "ABC",
                    "number": 153
                }
            ],
            "answer": "NBC",
            "answerValue": 1369,
            "question": "What network was mentioned the most in /r/television in the past month?",
            "rowIndex": 374,
            "approved": true,
            "params": {
                "wikidata_tag": "tv_stations",
                "subreddit": "television",
                "num_common_words": 1000,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.tv_stations] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'television') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      1000) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.tv_stations]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'television') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69837491,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Netflix",
                    "number": 349324
                },
                {
                    "label": "Opera",
                    "number": 259082
                },
                {
                    "label": "BitTorrent",
                    "number": 171479
                },
                {
                    "label": "Dolphin",
                    "number": 103172
                },
                {
                    "label": "Haiku",
                    "number": 91320
                },
                {
                    "label": "MATLAB",
                    "number": 88690
                },
                {
                    "label": "Osiris",
                    "number": 83718
                },
                {
                    "label": "Calculator",
                    "number": 71610
                },
                {
                    "label": "Dropbox",
                    "number": 71356
                },
                {
                    "label": "Hydrogen",
                    "number": 63869
                }
            ],
            "answer": "Netflix",
            "answerValue": 349324,
            "question": "Which software application had the most popular page in the last month?",
            "rowIndex": 385,
            "approved": true,
            "params": {
                "wikidata_tag": "software_applications",
                "substring": true
            },
            "sql": "\n  SELECT\n    replace(school.name, \"_\", \" \") AS name,\n    SUM(requests) AS total\n  FROM\n    [wikidata_tags.software_applications] school\n  JOIN EACH (\n    SELECT\n      title,\n      requests\n    FROM\n      [fh-bigquery:wikipedia.pagecounts_201606]) views\n  ON\n    views.title = name\n  GROUP BY\n    name\n  ORDER BY\n    total DESC IGNORE case\n",
            "inputSQL": "\n   SELECT\n      replace(school.name, \"_\", \" \") AS name,\n      SUM(requests) AS total\n    FROM\n      [wikidata_tags.software_applications] school\n    JOIN EACH (\n      SELECT\n        title,\n        requests\n      FROM\n        [fh-bigquery:wikipedia.pagecounts_201606]\n      WHERE\n        title = 'userInput'\nOR title CONTAINS CONCAT('_', replace('userInput', ' ', '_' ))\nOR title CONTAINS CONCAT(replace('userInput', ' ', '_' ), '_')\n ) views\n    ON\n      views.title = name\n    GROUP BY\n      name\n    ORDER BY\n      total DESC IGNORE case\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 9908462034,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Ford",
                    "number": 1588
                },
                {
                    "label": "BMW",
                    "number": 1305
                },
                {
                    "label": "Honda",
                    "number": 1128
                },
                {
                    "label": "Toyota",
                    "number": 985
                },
                {
                    "label": "Mazda",
                    "number": 740
                },
                {
                    "label": "Audi",
                    "number": 674
                },
                {
                    "label": "Subaru",
                    "number": 643
                },
                {
                    "label": "Porsche",
                    "number": 605
                },
                {
                    "label": "Nissan",
                    "number": 507
                },
                {
                    "label": "Seat",
                    "number": 499
                }
            ],
            "answer": "Ford",
            "answerValue": 1588,
            "question": "Which car company was mentioned the most in /r/cars in the past month?",
            "rowIndex": 400,
            "approved": true,
            "params": {
                "wikidata_tag": "cars",
                "subreddit": "cars",
                "substring": true,
                "num_common_words": 0,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.cars] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'cars') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      0) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.cars]\n  WHERE\n    name = 'userInput'\n      OR name CONTAINS CONCAT(' ', 'userInput')\n      OR name CONTAINS CONCAT('userInput', ' ')\n) topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'cars') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69774524,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "India",
                    "number": 28
                },
                {
                    "label": "China",
                    "number": 23
                },
                {
                    "label": "Greece",
                    "number": 21
                },
                {
                    "label": "Canada",
                    "number": 13
                },
                {
                    "label": "France",
                    "number": 10
                },
                {
                    "label": "Japan",
                    "number": 8
                },
                {
                    "label": "Germany",
                    "number": 8
                },
                {
                    "label": "Australia",
                    "number": 8
                },
                {
                    "label": "Italy",
                    "number": 6
                },
                {
                    "label": "Russia",
                    "number": 6
                }
            ],
            "answer": "India",
            "answerValue": 28,
            "question": "Which country was mentioned the most in /r/Business in the past month?",
            "rowIndex": 403,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "business"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 66983156,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Target",
                    "number":   792  
                },
                {
                    "label": "Google",
                    "number":   609  
                },
                {
                    "label": "Visa",
                    "number":   241  
                },
                {
                    "label": "Gap",
                    "number":   230  
                },
                {
                    "label": "UPS",
                    "number":   131  
                },
                {
                    "label": "Netflix",
                    "number":   122  
                },
                {
                    "label": "Apple",
                    "number":   122  
                },
                {
                    "label": "Wells Fargo",
                    "number":  119  
                },
                {
                    "label": "Walmart",
                    "number":   107
                },
                {
                    "label": "Facebook",
                    "number":   87
                }
            ],
            "answer": "Target",
            "answerValue": 792,
            "question": "Which Fortune 500 company was discussed the most in /r/personalfinance in the past month?",
            "rowIndex": 361,
            "approved": true,
            "params": {
                "wikidata_tag": "fortune_500",
                "subreddit": "personalfinance",
                "num_common_words": 10000,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.fortune_500] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'personalfinance') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      10000) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.fortune_500]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'personalfinance') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69849810,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Google",
                    "number": 86
                },
                {
                    "label": "Target",
                    "number": 71
                },
                {
                    "label": "Facebook",
                    "number": 49
                },
                {
                    "label": "Ball",
                    "number": 48
                },
                {
                    "label": "Progressive",
                    "number": 42
                },
                {
                    "label": "Apple",
                    "number": 28
                },
                {
                    "label": "Southern",
                    "number": 27
                },
                {
                    "label": "Gap",
                    "number": 25
                },
                {
                    "label": "Walmart",
                    "number": 20
                },
                {
                    "label": "Netflix",
                    "number": 12
                }
            ],
            "answer": "Google",
            "answerValue": 86,
            "question": "Which Fortune 500 company was mentioned the most in /r/bestof in the past month?",
            "rowIndex": 402,
            "approved": true,
            "params": {
                "wikidata_tag": "fortune_500",
                "subreddit": "bestof",
                "num_common_words": 500,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.fortune_500] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'bestof') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      500) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.fortune_500]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'bestof') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69701028,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Manager",
                    "number": 415
                },
                {
                    "label": "Boss",
                    "number": 345
                },
                {
                    "label": "employee",
                    "number": 172
                },
                {
                    "label": "Internship",
                    "number": 166
                },
                {
                    "label": "Sales",
                    "number": 160
                },
                {
                    "label": "General",
                    "number": 147
                },
                {
                    "label": "Major",
                    "number": 140
                },
                {
                    "label": "Marketing",
                    "number": 132
                },
                {
                    "label": "Support",
                    "number": 106
                },
                {
                    "label": "Private",
                    "number": 91
                }
            ],
            "answer": "Manager",
            "answerValue": 415,
            "question": "Which job was discussed the most in /r/jobs in the past month?",
            "rowIndex": 362,
            "approved": true,
            "params": {
                "freebase_tag": "job_titles",
                "subreddit": "jobs"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.job_titles] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'jobs') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.job_titles]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_07]\n  WHERE\n    subreddit = 'jobs') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 67011979,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Google",
                    "number": 113
                },
                {
                    "label": "Apple",
                    "number": 102
                },
                {
                    "label": "Facebook",
                    "number": 89
                },
                {
                    "label": "Tesla",
                    "number": 18
                },
                {
                    "label": "Uber",
                    "number": 14
                },
                {
                    "label": "Nexus",
                    "number": 13
                },
                {
                    "label": "Deere",
                    "number": 6
                },
                {
                    "label": "Razer",
                    "number": 5
                },
                {
                    "label": "Lyft",
                    "number": 5
                },
                {
                    "label": "The Bay",
                    "number": 4
                }
            ],
            "answer": "Facebook",
            "answerValue": 89,
            "question": "What company was mentioned the most in /r/tech in the past month?",
            "rowIndex": 350,
            "approved": true,
            "params": {
                "wikidata_tag": "businesses_clean",
                "subreddit": "tech",
                "num_common_words": 10000,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.businesses_clean] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'tech') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      10000) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.businesses_clean]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'tech') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69767011,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Dragonite",
                    "number": 4506
                },
                {
                    "label": "Snorlax",
                    "number": 4022
                },
                {
                    "label": "Pidgey",
                    "number": 3868
                },
                {
                    "label": "Eevee",
                    "number": 3325
                },
                {
                    "label": "Magikarp",
                    "number": 2988
                },
                {
                    "label": "Dratini",
                    "number": 2727
                },
                {
                    "label": "Vaporeon",
                    "number": 2495
                },
                {
                    "label": "Pikachu",
                    "number": 2062
                },
                {
                    "label": "Lapras",
                    "number": 1976
                },
                {
                    "label": "Gyarados",
                    "number": 1558
                }
            ],
            "answer": "Dragonite",
            "answerValue": 4506,
            "question": "Which Pokemon species was mentioned the most in /r/pokemongo in the past month?",
            "rowIndex": 358,
            "approved": true,
            "params": {
                "wikidata_tag": "pokemon_species",
                "subreddit": "pokemongo",
                "num_common_words": 0,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.pokemon_species] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'pokemongo') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      0) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.pokemon_species]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'pokemongo') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 70487291,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Barack Obama",
                    "number": 8326119
                },
                {
                    "label": "Bill Clinton",
                    "number": 1531359
                },
                {
                    "label": "Abraham Lincoln",
                    "number": 1310220
                },
                {
                    "label": "Ronald Reagan",
                    "number": 1303617
                },
                {
                    "label": "George Washington",
                    "number": 1152989
                },
                {
                    "label": "Richard Nixon",
                    "number": 853084
                },
                {
                    "label": "Thomas Jefferson",
                    "number": 851182
                },
                {
                    "label": "Jimmy Carter",
                    "number": 721340
                },
                {
                    "label": "Theodore Roosevelt",
                    "number": 687557
                },
                {
                    "label": "Gerald Ford",
                    "number": 480286
                }
            ],
            "answer": "Barack Obama",
            "answerValue": 8326119,
            "question": "Which U.S. President had the most popular page in the past month?",
            "rowIndex": 141,
            "approved": true,
            "params": {
                "freebase_tag": "presidents",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.presidents]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201606] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.presidents]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201606] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6525598971
        },
        {
            "top10": [
                {
                    "label": "Time",
                    "number": 404880
                },
                {
                    "label": "Rolling Stone",
                    "number": 278136
                },
                {
                    "label": "Playboy",
                    "number": 195747
                },
                {
                    "label": "The Economist",
                    "number": 174601
                },
                {
                    "label": "Der Spiegel",
                    "number": 149788
                },
                {
                    "label": "Twice",
                    "number": 146090
                },
                {
                    "label": "Life Magazine",
                    "number": 141501
                },
                {
                    "label": "De Stijl",
                    "number": 140757
                },
                {
                    "label": "True Detective",
                    "number": 138758
                },
                {
                    "label": "Billboard",
                    "number": 133590
                }
            ],
            "answer": "Time",
            "answerValue": 404880,
            "question": "What magazine had the most popular Wikipedia page in the past month?",
            "rowIndex": 254,
            "approved": true,
            "params": {
                "freebase_tag": "magazines",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.magazines]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201606] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.magazines]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201606] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 1112166465,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "The New York Times",
                    "number": 594578
                },
                {
                    "label": "The Guardian",
                    "number": 496286
                },
                {
                    "label": "USA Today",
                    "number": 248771
                },
                {
                    "label": "The Daily Telegraph",
                    "number": 247624
                },
                {
                    "label": "The Times",
                    "number": 240546
                },
                {
                    "label": "The Washington Post",
                    "number": 207313
                },
                {
                    "label": "The Economist",
                    "number": 174601
                },
                {
                    "label": "The Wall Street Journal",
                    "number": 172910
                },
                {
                    "label": "The Independent",
                    "number": 145058
                },
                {
                    "label": "Financial Times",
                    "number": 143569
                }
            ],
            "answer": "The New York Times",
            "answerValue": 594578,
            "question": "What newspaper had the most popular Wikipedia page in the past month?",
            "rowIndex": 255,
            "approved": true,
            "params": {
                "freebase_tag": "newspapers",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.newspapers]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201606] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.newspapers]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201606] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 1113938493,
            "warnings": {}
        }
    ],
    "total": 58
}