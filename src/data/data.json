{
    "questions": [
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 9.946524064171124
                },
                {
                    "label": "Liechtenstein",
                    "number": 6.77052127022169
                },
                {
                    "label": "Niger",
                    "number": 5.215047788397421
                },
                {
                    "label": "Djibouti",
                    "number": 5.116416150898909
                },
                {
                    "label": "Brunei",
                    "number": 5.067594592432606
                },
                {
                    "label": "Iran",
                    "number": 4.6967974965359405
                },
                {
                    "label": "Cameroon",
                    "number": 4.685465350285295
                },
                {
                    "label": "Aruba",
                    "number": 4.253112033195021
                },
                {
                    "label": "Germany",
                    "number": 4.132632219656246
                },
                {
                    "label": "Russia",
                    "number": 4.025043069527008
                }
            ],
            "answer": "Benin",
            "answerValue": 9.946524064171124,
            "question": "Which country was the most cooperative last year?",
            "rowIndex": 2,
            "approved": true,
            "params": {
                "codes": "('031', '030')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1000
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('031', '030') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('031', '030') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380821133,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 3.1372549019607843
                },
                {
                    "label": "Armenia",
                    "number": 2.715272972523189
                },
                {
                    "label": "Niger",
                    "number": 1.9726605912424984
                },
                {
                    "label": "Cameroon",
                    "number": 1.7520183725169876
                },
                {
                    "label": "Chad",
                    "number": 1.6296712559707782
                },
                {
                    "label": "Iceland",
                    "number": 0.9528346831824679
                },
                {
                    "label": "Belarus",
                    "number": 0.805189675341446
                },
                {
                    "label": "Kazakhstan",
                    "number": 0.6832371304040523
                },
                {
                    "label": "Tajikistan",
                    "number": 0.662361318099023
                },
                {
                    "label": "Kyrgyzstan",
                    "number": 0.5552813425468904
                }
            ],
            "answer": "Benin",
            "answerValue": 3.1372549019607843,
            "question": "Which country had the most cooperative military last year?",
            "rowIndex": 14,
            "approved": true,
            "params": {
                "codes": "('0312')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0312') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0312') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579334,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Ivory Coast",
                    "number": 4.228673660242335
                },
                {
                    "label": "Guatemala",
                    "number": 3.5446125700346838
                },
                {
                    "label": "Guinea",
                    "number": 3.1391014322150284
                },
                {
                    "label": "Burkina Faso",
                    "number": 1.8883415435139572
                },
                {
                    "label": "Burundi",
                    "number": 1.857552276828362
                },
                {
                    "label": "Togo",
                    "number": 1.6151361329026304
                },
                {
                    "label": "Moldova",
                    "number": 1.5679323743949827
                },
                {
                    "label": "Honduras",
                    "number": 1.4513788098693758
                },
                {
                    "label": "Senegal",
                    "number": 1.2675036214389184
                },
                {
                    "label": "Antigua and Barbuda",
                    "number": 1.2619433928249504
                }
            ],
            "answer": "Ivory Coast",
            "answerValue": 4.228673660242335,
            "question": "Which country called for leadership change the most last year?",
            "rowIndex": 8,
            "approved": true,
            "params": {
                "codes": "('0241')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0241') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0241') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579334,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Brazil",
                    "number": 1.5230109029662877
                },
                {
                    "label": "Grenada",
                    "number": 1.036699149906697
                },
                {
                    "label": "Switzerland",
                    "number": 1.0303592317156693
                },
                {
                    "label": "Bangladesh",
                    "number": 0.9906644444703442
                },
                {
                    "label": "Zimbabwe",
                    "number": 0.6752080484799379
                },
                {
                    "label": "Lithuania",
                    "number": 0.669882100750268
                },
                {
                    "label": "Chile",
                    "number": 0.5642279480910288
                },
                {
                    "label": "Chad",
                    "number": 0.561955605507165
                },
                {
                    "label": "Rwanda",
                    "number": 0.4202828503582911
                },
                {
                    "label": "Nepal",
                    "number": 0.3592760587416356
                }
            ],
            "answer": "Brazil",
            "answerValue": 1.5230109029662877,
            "question": "Which country willingly shared the most intelligence last year?",
            "rowIndex": 16,
            "approved": true,
            "params": {
                "codes": "('0314')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 10000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0314') THEN 1 ELSE 0 END) * 10000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0314') THEN 1 ELSE 0 END) * 10000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 10,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579334,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 23087
                },
                {
                    "label": "Russia",
                    "number": 12343
                },
                {
                    "label": "Iran",
                    "number": 9079
                },
                {
                    "label": "Australia",
                    "number": 8981
                },
                {
                    "label": "United Kingdom",
                    "number": 8428
                },
                {
                    "label": "Canada",
                    "number": 8078
                },
                {
                    "label": "Japan",
                    "number": 7759
                },
                {
                    "label": "Vietnam",
                    "number": 5573
                },
                {
                    "label": "Turkey",
                    "number": 5503
                },
                {
                    "label": "Germany",
                    "number": 4727
                }
            ],
            "answer": "China",
            "answerValue": 23087,
            "question": "Which country, besides the United States, provided the most economic support to other countries last year?",
            "rowIndex": 17,
            "approved": true,
            "params": {
                "codes": "('061')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "filter_us": true
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('061') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \n  AND codes.country != 'United States'\nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('061') \n  AND codes.country != 'United States'\n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579150,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "United Kingdom",
                    "number": 148231
                },
                {
                    "label": "China",
                    "number": 129654
                },
                {
                    "label": "Iran",
                    "number": 113828
                },
                {
                    "label": "Russia",
                    "number": 110351
                },
                {
                    "label": "Canada",
                    "number": 105030
                },
                {
                    "label": "France",
                    "number": 104969
                },
                {
                    "label": "Israel",
                    "number": 86381
                },
                {
                    "label": "Cuba",
                    "number": 77636
                },
                {
                    "label": "Mexico",
                    "number": 75061
                },
                {
                    "label": "Iraq",
                    "number": 65497
                }
            ],
            "answer": "United Kingdom",
            "answerValue": 148231,
            "question": "Which country was mentioned the most with the United States in the news last year?",
            "rowIndex": 20,
            "approved": true,
            "params": {
                "country": "United States",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'United States' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'United States' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 761343835,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Haiti",
                    "number": 5.0675675675675675
                },
                {
                    "label": "Macao",
                    "number": 4.459308807134894
                },
                {
                    "label": "Nepal",
                    "number": 3.646651996227601
                },
                {
                    "label": "Saint Vincent and the Grenadines",
                    "number": 3.5655512890839276
                },
                {
                    "label": "Malawi",
                    "number": 2.5917199596095593
                },
                {
                    "label": "Papua New Guinea",
                    "number": 2.332814930015552
                },
                {
                    "label": "Kiribati",
                    "number": 2.0796197266785503
                },
                {
                    "label": "Tanzania",
                    "number": 2.065867062457379
                },
                {
                    "label": "Nicaragua",
                    "number": 2.061105722599418
                },
                {
                    "label": "United States",
                    "number": 1.877092553721561
                }
            ],
            "answer": "Haiti",
            "answerValue": 5.0675675675675675,
            "question": "Which country appealed the most for economic aid last year?",
            "rowIndex": 9,
            "approved": true,
            "params": {
                "codes": "('0231')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0231') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0231') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 380579334,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Pakistan",
                    "number": 24881
                },
                {
                    "label": "United States",
                    "number": 10570
                },
                {
                    "label": "China",
                    "number": 7851
                },
                {
                    "label": "Bangladesh",
                    "number": 6869
                },
                {
                    "label": "United Kingdom",
                    "number": 6552
                },
                {
                    "label": "Nepal",
                    "number": 4762
                },
                {
                    "label": "Sri Lanka",
                    "number": 3572
                },
                {
                    "label": "Japan",
                    "number": 3018
                },
                {
                    "label": "France",
                    "number": 2876
                },
                {
                    "label": "Senegal",
                    "number": 2366
                }
            ],
            "answer": "Pakistan",
            "answerValue": 24881,
            "question": "Which country was mentioned with India the most in the news last year?",
            "rowIndex": 34,
            "approved": true,
            "params": {
                "country": "India",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'India' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'India' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 761318140,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "PHP",
                    "number": 7.039322326008666
                },
                {
                    "label": "Python",
                    "number": 5.343680964213379
                },
                {
                    "label": "C#",
                    "number": 5.28156698146205
                },
                {
                    "label": "Ruby",
                    "number": 5.160742156835582
                },
                {
                    "label": "C++",
                    "number": 4.767147418253881
                },
                {
                    "label": "JavaScript",
                    "number": 4.352334793632101
                },
                {
                    "label": "Java",
                    "number": 4.015508412582297
                },
                {
                    "label": "C",
                    "number": 3.73893627417629
                },
                {
                    "label": "Shell",
                    "number": 3.199424583089136
                },
                {
                    "label": null,
                    "number": 1.6748122751442072
                }
            ],
            "answer": "PHP",
            "answerValue": 7.039322326008666,
            "question": "Which programming language has the most issues per commit?",
            "rowIndex": 48,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(#)\\d+') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "inputSQL": "SELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(#)\\d+') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nAND\n  repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Issues per Commit",
            "hasPassingInputQuery": true,
            "rowsSearched": 6222840,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Java",
                    "number": 5.9166057059253845
                },
                {
                    "label": "C",
                    "number": 5.628506219190114
                },
                {
                    "label": "Shell",
                    "number": 3.050242421013373
                },
                {
                    "label": "C++",
                    "number": 2.1162856129276917
                },
                {
                    "label": "JavaScript",
                    "number": 1.294056129959267
                },
                {
                    "label": "C#",
                    "number": 1.21587634704109
                },
                {
                    "label": "Python",
                    "number": 0.5436717753946406
                },
                {
                    "label": "PHP",
                    "number": 0.3455031745644628
                },
                {
                    "label": "Ruby",
                    "number": 0.2616696989567075
                }
            ],
            "answer": "Java",
            "answerValue": 5.9166057059253845,
            "question": "Which programming language talks about Android the most?",
            "rowIndex": 51,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(android)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(android)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(android)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 6222796,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "JavaScript",
                    "number": 19867
                },
                {
                    "label": "Ruby",
                    "number": 19618
                },
                {
                    "label": "Java",
                    "number": 15651
                },
                {
                    "label": "Python",
                    "number": 12330
                },
                {
                    "label": "PHP",
                    "number": 11848
                },
                {
                    "label": "C",
                    "number": 6446
                },
                {
                    "label": "C++",
                    "number": 5705
                },
                {
                    "label": "C#",
                    "number": 3359
                },
                {
                    "label": "Objective-C",
                    "number": 3165
                },
                {
                    "label": "Shell",
                    "number": 2905
                }
            ],
            "answer": "JavaScript",
            "answerValue": 19867,
            "question": "Which programming language created the most new projects last year?",
            "rowIndex": 55,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  COUNT(UNIQUE(repository_name)) total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'CreateEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nORDER BY\n  total DESC",
            "inputSQL": "SELECT\n  repository_language,\n  COUNT(UNIQUE(repository_name)) total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'CreateEvent'\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nORDER BY\n  total DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Projects",
            "hasPassingInputQuery": true,
            "rowsSearched": 6406727,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Nebraska",
                    "number": 2.2900763358778624
                },
                {
                    "label": "Pennsylvania",
                    "number": 1.9593872461702886
                },
                {
                    "label": "New York",
                    "number": 1.7699115044247788
                },
                {
                    "label": "Alabama",
                    "number": 1.6734279918864097
                },
                {
                    "label": "Kentucky",
                    "number": 1.407954945441746
                },
                {
                    "label": "Illinois",
                    "number": 1.1778563015312131
                },
                {
                    "label": "Iowa",
                    "number": 1.1219147344801794
                },
                {
                    "label": "Kansas",
                    "number": 1.092896174863388
                },
                {
                    "label": "Wisconsin",
                    "number": 0.8661614058465895
                },
                {
                    "label": "West Virginia",
                    "number": 0.6961506961506961
                }
            ],
            "answer": "Nebraska",
            "answerValue": 2.2900763358778624,
            "question": "Which state's subreddit talked about Obama the most in the past year?",
            "rowIndex": 63,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(obama|barack)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(obama|barack)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(obama|barack)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "JavaScript",
                    "number": 54341
                },
                {
                    "label": "Ruby",
                    "number": 40693
                },
                {
                    "label": "Java",
                    "number": 33836
                },
                {
                    "label": "Python",
                    "number": 31757
                },
                {
                    "label": "PHP",
                    "number": 30094
                },
                {
                    "label": "C",
                    "number": 16045
                },
                {
                    "label": "C++",
                    "number": 13970
                },
                {
                    "label": "Objective-C",
                    "number": 8904
                },
                {
                    "label": "C#",
                    "number": 7972
                },
                {
                    "label": "Shell",
                    "number": 7844
                }
            ],
            "answer": "JavaScript",
            "answerValue": 54341,
            "question": "What's the most popular programming language?",
            "rowIndex": 36,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  COUNT(*) total\nFROM (\n  SELECT\n    repository_language,\n  FROM\n   [bigquery-public-data:samples.github_timeline]\n  WHERE\n    repository_language IS NOT NULL\n  GROUP BY\n    repository_language,\n    repository_name )\nGROUP BY\n  repository_language\nORDER BY\n  total DESC",
            "inputSQL": "SELECT\n  repository_language,\n  COUNT(*) total\nFROM (\n  SELECT\n    repository_language,\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    LOWER(repository_language) = lower('userInput')\n  GROUP BY\n    repository_language,\n    repository_name )\nGROUP BY\n  repository_language\nORDER BY\n  total DESC",
            "databases": "GitHub",
            "units": "Repositories",
            "hasPassingInputQuery": true,
            "rowsSearched": 7927563,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Ohio",
                    "number": 3.7789427697684577
                },
                {
                    "label": "Iowa",
                    "number": 3.5901271503365746
                },
                {
                    "label": "South Carolina",
                    "number": 3.5624325296869377
                },
                {
                    "label": "Nevada",
                    "number": 3.559870550161812
                },
                {
                    "label": "New York",
                    "number": 2.4582104228121926
                },
                {
                    "label": "Florida",
                    "number": 2.45275432247688
                },
                {
                    "label": "Missouri",
                    "number": 2.2538552787663106
                },
                {
                    "label": "Minnesota",
                    "number": 1.8172977572479183
                },
                {
                    "label": "North Carolina",
                    "number": 1.7235943247503942
                },
                {
                    "label": "Pennsylvania",
                    "number": 1.7100106875667973
                }
            ],
            "answer": "Ohio",
            "answerValue": 3.7789427697684577,
            "question": "Which state's subreddit talked about Donald Trump the most in the past year?",
            "rowIndex": 67,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(trump|the donald)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(trump|the donald)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(trump|the donald)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "C",
                    "number": 1.6615144904954815
                },
                {
                    "label": "JavaScript",
                    "number": 0.6865718334222778
                },
                {
                    "label": "C#",
                    "number": 0.613020572002007
                },
                {
                    "label": "C++",
                    "number": 0.59613457408733
                },
                {
                    "label": "Python",
                    "number": 0.5433132852599427
                },
                {
                    "label": "PHP",
                    "number": 0.5374825546620589
                },
                {
                    "label": "Java",
                    "number": 0.5347854356306893
                },
                {
                    "label": "Ruby",
                    "number": 0.41609121962008205
                },
                {
                    "label": "Objective-C",
                    "number": 0.390947888589398
                },
                {
                    "label": "Perl",
                    "number": 0.27904975038733
                }
            ],
            "answer": "C",
            "answerValue": 1.6615144904954815,
            "question": "Which programming language has the most open issues per repo?",
            "rowIndex": 52,
            "approved": true,
            "sql": "SELECT\n  repos.repository_language,\n  (issues.total / repos.total) per\nFROM (\n  SELECT\n  repository_language,\n  COUNT(*) total\n  FROM \n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'IssuesEvent'\n  AND\n    repository_language IS NOT NULL\n  AND\n    payload_action = 'opened'\n  GROUP BY\n    repository_language) issues\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = issues.repository_language\nORDER BY\n  per DESC\nLIMIT 10",
            "inputSQL": "SELECT\n  repos.repository_language,\n  (issues.total / repos.total) per\nFROM (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'IssuesEvent'\n    AND repository_language IS NOT NULL\n    AND payload_action = 'opened'\n  GROUP BY\n    repository_language) issues\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = issues.repository_language\nWHERE\n  repos.repository_language = 'userInput'\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE",
            "databases": "GitHub",
            "units": "Issues per Repo",
            "hasPassingInputQuery": true,
            "rowsSearched": 14149100,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "C++",
                    "number": 11.703221188260558
                },
                {
                    "label": "Java",
                    "number": 10.100189147653387
                },
                {
                    "label": "C",
                    "number": 10.076472421315051
                },
                {
                    "label": "Shell",
                    "number": 9.57113717491076
                },
                {
                    "label": "JavaScript",
                    "number": 8.375959220478093
                },
                {
                    "label": "Python",
                    "number": 8.224548918348711
                },
                {
                    "label": "PHP",
                    "number": 8.174985046853193
                },
                {
                    "label": "Ruby",
                    "number": 7.982626004472514
                },
                {
                    "label": "C#",
                    "number": 7.531234320120421
                },
                {
                    "label": "Perl",
                    "number": 6.296780857290411
                }
            ],
            "answer": "C++",
            "answerValue": 11.703221188260558,
            "question": "Which programming language has the most commits per repo?",
            "rowIndex": 53,
            "approved": true,
            "sql": "SELECT\n  repos.repository_language,\n  (commits.total / repos.total) per,\nFROM (\n  SELECT\n  repository_language,\n  COUNT(payload_commit_msg) total\n  FROM \n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'PushEvent'\n  AND\n    payload_commit_msg IS NOT NULL\n  AND\n    repository_language IS NOT NULL\n  GROUP BY\n    repository_language) commits\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = commits.repository_language\nORDER BY\n  per DESC\nLIMIT 10",
            "inputSQL": "SELECT\n  repos.repository_language,\n  (commits.total / repos.total) per,\nFROM (\n  SELECT\n  repository_language,\n  COUNT(payload_commit_msg) total\n  FROM \n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'PushEvent'\n  AND\n    payload_commit_msg IS NOT NULL\n  AND\n    repository_language IS NOT NULL\n  GROUP BY\n    repository_language) commits\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = commits.repository_language\nWHERE\n  lower(commits.repository_language) = lower('userInput')\nORDER BY\n  per DESC\nLIMIT 10",
            "databases": "GitHub",
            "units": "Commits per Repo",
            "hasPassingInputQuery": true,
            "rowsSearched": 14150362,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Go",
                    "number": 5.388253404266648
                },
                {
                    "label": "Objective-C",
                    "number": 1.5749262567619684
                },
                {
                    "label": "HTML",
                    "number": 1.3192908210701806
                },
                {
                    "label": "Java",
                    "number": 1.2057899096414024
                },
                {
                    "label": "CSS",
                    "number": 1.002261160978466
                },
                {
                    "label": "CoffeeScript",
                    "number": 0.880547896468914
                },
                {
                    "label": "JavaScript",
                    "number": 0.8616159384093158
                },
                {
                    "label": "C++",
                    "number": 0.8212381402797673
                },
                {
                    "label": "TypeScript",
                    "number": 0.7767971623506069
                },
                {
                    "label": "Python",
                    "number": 0.7746727907039265
                }
            ],
            "answer": "Go",
            "answerValue": 5.388253404266648,
            "question": "Which programming language mentions Google the most?",
            "rowIndex": 42,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(google)\\b",
                "per": 100,
                "min_comments": 50000
            },
            "sql": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(google)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language IS NOT NULL) repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nHAVING\n  total > 50000\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(google)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language = 'userInput') repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 1242016253,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "New York",
                    "number": 60
                },
                {
                    "label": "California",
                    "number": 56
                },
                {
                    "label": "Washington",
                    "number": 53
                },
                {
                    "label": "Texas",
                    "number": 42
                },
                {
                    "label": "Florida",
                    "number": 41
                },
                {
                    "label": "Georgia",
                    "number": 30
                },
                {
                    "label": "Hawaii",
                    "number": 26
                },
                {
                    "label": "Colorado",
                    "number": 22
                },
                {
                    "label": "Oregon",
                    "number": 21
                },
                {
                    "label": "Wyoming",
                    "number": 20
                }
            ],
            "answer": "New York",
            "answerValue": 60,
            "question": "Which state was mentioned the most in /r/travel in the past month?",
            "rowIndex": 100,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "travel",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.states]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.states]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 1180445731,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Michael Phelps",
                    "number": 90
                },
                {
                    "label": "Usain Bolt",
                    "number": 82
                },
                {
                    "label": "Ryan Lochte",
                    "number": 80
                },
                {
                    "label": "Neymar",
                    "number": 43
                },
                {
                    "label": "Jesse Owens",
                    "number": 31
                },
                {
                    "label": "Hope Solo",
                    "number": 28
                },
                {
                    "label": "Michael Jordan",
                    "number": 23
                },
                {
                    "label": "Lance Armstrong",
                    "number": 21
                },
                {
                    "label": "Ronaldo",
                    "number": 15
                },
                {
                    "label": "LeBron James",
                    "number": 13
                }
            ],
            "answer": "Michael Phelps",
            "answerValue": 90,
            "question": "Who was the most popular athlete in /r/sports in the past month?",
            "rowIndex": 77,
            "approved": true,
            "params": {
                "freebase_tag": "athletes",
                "subreddit": "sports",
                "num_common_words": 500,
                "substring": true,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.athletes]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'sports') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.athletes]\n      WHERE\n        name = 'userInput'\n      OR name CONTAINS CONCAT(' ', 'userInput')\n      OR name CONTAINS CONCAT('userInput', ' ')\n) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'sports') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 1297240490,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "The Beatles",
                    "number": 286
                },
                {
                    "label": "Metallica",
                    "number": 263
                },
                {
                    "label": "Nirvana",
                    "number": 248
                },
                {
                    "label": "Common",
                    "number": 233
                },
                {
                    "label": "Johnny Cash",
                    "number": 219
                },
                {
                    "label": "Radiohead",
                    "number": 217
                },
                {
                    "label": "Disturbed",
                    "number": 213
                },
                {
                    "label": "Tool",
                    "number": 204
                },
                {
                    "label": "Pearl Jam",
                    "number": 187
                },
                {
                    "label": "Queen",
                    "number": 153
                }
            ],
            "answer": "The Beatles",
            "answerValue": 286,
            "question": "What musical group was talked about in /r/music the most in the past month?",
            "rowIndex": 75,
            "approved": true,
            "params": {
                "freebase_tag": "musicians",
                "subreddit": "music",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.musicians]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'music') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.musicians]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'music') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 1208021986,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Detroit",
                    "number": 49
                },
                {
                    "label": "London",
                    "number": 23
                },
                {
                    "label": "Chicago",
                    "number": 20
                },
                {
                    "label": "Atlanta",
                    "number": 18
                },
                {
                    "label": "Dallas",
                    "number": 12
                },
                {
                    "label": "Toronto",
                    "number": 12
                },
                {
                    "label": "Paris",
                    "number": 11
                },
                {
                    "label": "Boston",
                    "number": 11
                },
                {
                    "label": "Miami",
                    "number": 11
                },
                {
                    "label": "Vancouver",
                    "number": 11
                }
            ],
            "answer": "Detroit",
            "answerValue": 49,
            "question": "Which city was mentioned the most in /r/UpliftingNews in the past month?",
            "rowIndex": 107,
            "approved": true,
            "params": {
                "freebase_tag": "cities",
                "subreddit": "upliftingnews",
                "top_wiki": 75
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    75 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'upliftingnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    75 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'upliftingnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 1196316857,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Texas",
                    "number": 1321
                },
                {
                    "label": "California",
                    "number": 857
                },
                {
                    "label": "Washington",
                    "number": 646
                },
                {
                    "label": "Florida",
                    "number": 620
                },
                {
                    "label": "New York",
                    "number": 446
                },
                {
                    "label": "Louisiana",
                    "number": 336
                },
                {
                    "label": "Colorado",
                    "number": 322
                },
                {
                    "label": "Ohio",
                    "number": 258
                },
                {
                    "label": "Virginia",
                    "number": 252
                },
                {
                    "label": "Kansas",
                    "number": 248
                }
            ],
            "answer": "Texas",
            "answerValue": 1321,
            "question": "Which state was mentioned the most in /r/news in the past month?",
            "rowIndex": 98,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "news",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.states]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.states]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 1181010693,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Puerto Rico",
                    "number": 131
                },
                {
                    "label": "Canada",
                    "number": 129
                },
                {
                    "label": "Australia",
                    "number": 77
                },
                {
                    "label": "Singapore",
                    "number": 71
                },
                {
                    "label": "India",
                    "number": 69
                },
                {
                    "label": "Colombia",
                    "number": 46
                },
                {
                    "label": "Israel",
                    "number": 45
                },
                {
                    "label": "Germany",
                    "number": 44
                },
                {
                    "label": "China",
                    "number": 43
                },
                {
                    "label": "Mexico",
                    "number": 24
                }
            ],
            "answer": "Puerto Rico",
            "answerValue": 131,
            "question": "Which country was mentioned the most in /r/UpliftingNews in the past month?",
            "rowIndex": 108,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "upliftingnews",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.countries]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'upliftingnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.countries]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'upliftingnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 1181230448,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Seattle",
                    "number": 2.111801242236025
                },
                {
                    "label": "Los Angeles",
                    "number": 2.047327217353936
                },
                {
                    "label": "Atlanta",
                    "number": 1.824178134389152
                },
                {
                    "label": "Pittsburgh",
                    "number": 1.7944059394836598
                },
                {
                    "label": "Austin",
                    "number": 1.7139845078141636
                },
                {
                    "label": "Denver",
                    "number": 1.6448027238133387
                },
                {
                    "label": "Boston",
                    "number": 1.5753958798171697
                },
                {
                    "label": "San Diego",
                    "number": 1.509454290793514
                },
                {
                    "label": "Houston",
                    "number": 1.4879872537110945
                },
                {
                    "label": "San Francisco",
                    "number": 1.403764641538672
                }
            ],
            "answer": "Seattle",
            "answerValue": 2.111801242236025,
            "question": "Which city's subreddit discussed traffic the most?",
            "rowIndex": 153,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(traffic)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(traffic)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(traffic)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 532396361,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "New York",
                    "number": 6.588003933136677
                },
                {
                    "label": "Nevada",
                    "number": 3.559870550161812
                },
                {
                    "label": "Mississippi",
                    "number": 2.992957746478873
                },
                {
                    "label": "South Carolina",
                    "number": 2.626844188557035
                },
                {
                    "label": "Missouri",
                    "number": 2.372479240806643
                },
                {
                    "label": "Iowa",
                    "number": 1.6454749439042633
                },
                {
                    "label": "Ohio",
                    "number": 1.6164263870685889
                },
                {
                    "label": "Tennessee",
                    "number": 1.4304291287386215
                },
                {
                    "label": "Pennsylvania",
                    "number": 1.3181332383327395
                },
                {
                    "label": "Nebraska",
                    "number": 1.2213740458015268
                }
            ],
            "answer": "New York",
            "answerValue": 6.588003933136677,
            "question": "Which state's subreddit talked about Hillary Clinton the most in the past year?",
            "rowIndex": 167,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(hillary|clinton)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(hillary|clinton)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(hillary|clinton)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Germany",
                    "number": 3198
                },
                {
                    "label": "Russia",
                    "number": 3042
                },
                {
                    "label": "Turkey",
                    "number": 2159
                },
                {
                    "label": "France",
                    "number": 1993
                },
                {
                    "label": "Poland",
                    "number": 1181
                },
                {
                    "label": "Greece",
                    "number": 998
                },
                {
                    "label": "Ukraine",
                    "number": 925
                },
                {
                    "label": "Sweden",
                    "number": 848
                },
                {
                    "label": "Italy",
                    "number": 766
                },
                {
                    "label": "Romania",
                    "number": 701
                }
            ],
            "answer": "Germany",
            "answerValue": 3198,
            "question": "Which country was mentioned the most in /r/europe in the past month? ",
            "rowIndex": 69,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "europe"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'europe') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'europe') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 69833308,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Kansas",
                    "number": 5.46448087431694
                },
                {
                    "label": "Tennessee",
                    "number": 5.201560468140442
                },
                {
                    "label": "Missouri",
                    "number": 4.744958481613286
                },
                {
                    "label": "South Dakota",
                    "number": 4.405286343612334
                },
                {
                    "label": "New Mexico",
                    "number": 3.816793893129771
                },
                {
                    "label": "Massachusetts",
                    "number": 3.707627118644068
                },
                {
                    "label": "West Virginia",
                    "number": 3.276003276003276
                },
                {
                    "label": "Nevada",
                    "number": 3.236245954692557
                },
                {
                    "label": "Illinois",
                    "number": 2.944640753828033
                },
                {
                    "label": "Michigan",
                    "number": 2.1515497882068177
                }
            ],
            "answer": "Kansas",
            "answerValue": 5.46448087431694,
            "question": "Which state's subreddit discussed unemployment the most in the past year?",
            "rowIndex": 185,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(unemployment|unemployed)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(unemployment|unemployed)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(unemployment|unemployed)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "San Francisco",
                    "number": 7.641705786731082
                },
                {
                    "label": "Vancouver",
                    "number": 2.0920935435093315
                },
                {
                    "label": "Montreal",
                    "number": 1.5772210203084653
                },
                {
                    "label": "San Diego",
                    "number": 1.5730216021117276
                },
                {
                    "label": "New York City",
                    "number": 1.4869238170209045
                },
                {
                    "label": "Austin",
                    "number": 1.2531984486869343
                },
                {
                    "label": "Denver",
                    "number": 1.0848521263101676
                },
                {
                    "label": "Los Angeles",
                    "number": 1.0603314586797705
                },
                {
                    "label": "Chicago",
                    "number": 1.0168693269395443
                },
                {
                    "label": "Washington, D.C.",
                    "number": 0.9992089595736708
                }
            ],
            "answer": "San Francisco",
            "answerValue": 7.641705786731082,
            "question": "Which city's subreddit talked about Airbnb the most?",
            "rowIndex": 190,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(airbnb)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 532396361,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Iowa",
                    "number": 2.7424582398404387
                },
                {
                    "label": "Idaho",
                    "number": 2.4479804161566707
                },
                {
                    "label": "Texas",
                    "number": 2.3393180887771217
                },
                {
                    "label": "New York",
                    "number": 1.966568338249754
                },
                {
                    "label": "Illinois",
                    "number": 1.7667844522968197
                },
                {
                    "label": "Ohio",
                    "number": 1.747487986020096
                },
                {
                    "label": "Missouri",
                    "number": 1.1862396204033214
                },
                {
                    "label": "Kentucky",
                    "number": 1.0559662090813093
                },
                {
                    "label": "Utah",
                    "number": 1.0476689366160294
                },
                {
                    "label": "Oklahoma",
                    "number": 0.9599232061435086
                }
            ],
            "answer": "Iowa",
            "answerValue": 2.7424582398404387,
            "question": "Which state's subreddit talked about Ted Cruz the most in the past year?",
            "rowIndex": 215,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(ted cruz)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ted cruz)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ted cruz)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Nevada",
                    "number": 9.06148867313916
                },
                {
                    "label": "New York",
                    "number": 6.784660766961652
                },
                {
                    "label": "Nebraska",
                    "number": 6.717557251908397
                },
                {
                    "label": "South Carolina",
                    "number": 5.325656711047139
                },
                {
                    "label": "Iowa",
                    "number": 3.5402642732485665
                },
                {
                    "label": "Missouri",
                    "number": 3.0842230130486357
                },
                {
                    "label": "Tennessee",
                    "number": 2.6657997399219764
                },
                {
                    "label": "Ohio",
                    "number": 2.5557011795543905
                },
                {
                    "label": "Montana",
                    "number": 2.1760154738878144
                },
                {
                    "label": "Vermont",
                    "number": 2.1467327199811277
                }
            ],
            "answer": "Nevada",
            "answerValue": 9.06148867313916,
            "question": "Which state's subreddit talked about Bernie Sanders the most in the past year?",
            "rowIndex": 216,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(bernie|sanders|#?feelthebern)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(bernie|sanders|#?feelthebern)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(bernie|sanders|#?feelthebern)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Los Angeles",
                    "number": 6.072382803011902
                },
                {
                    "label": "San Diego",
                    "number": 3.663200991219092
                },
                {
                    "label": "Houston",
                    "number": 3.431086431827862
                },
                {
                    "label": "Vancouver",
                    "number": 2.4166097037236502
                },
                {
                    "label": "Boston",
                    "number": 1.9496133266902065
                },
                {
                    "label": "Dallas",
                    "number": 1.869775626924769
                },
                {
                    "label": "Montreal",
                    "number": 1.8145020587619514
                },
                {
                    "label": "Chicago",
                    "number": 1.462864645772678
                },
                {
                    "label": "Washington, D.C.",
                    "number": 1.3877902216300984
                },
                {
                    "label": "Denver",
                    "number": 1.3352026169971294
                }
            ],
            "answer": "Los Angeles",
            "answerValue": 6.072382803011902,
            "question": "Which city’s subreddit talked about gas prices the most?",
            "rowIndex": 214,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(gas prices?|price of gas)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(gas prices?|price of gas)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(gas prices?|price of gas)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 10,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 532396361,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Ohio",
                    "number": 3.757099169943207
                },
                {
                    "label": "New York",
                    "number": 0.688298918387414
                },
                {
                    "label": "Wisconsin",
                    "number": 0.3997668026984259
                },
                {
                    "label": "Idaho",
                    "number": 0.3671970624235006
                },
                {
                    "label": "Arizona",
                    "number": 0.14527845036319612
                },
                {
                    "label": "South Carolina",
                    "number": 0.1439366678661389
                },
                {
                    "label": "Pennsylvania",
                    "number": 0.14250089063056645
                },
                {
                    "label": "Florida",
                    "number": 0.1407318053880177
                },
                {
                    "label": "Tennessee",
                    "number": 0.13003901170351106
                },
                {
                    "label": "North Dakota",
                    "number": 0.12562814070351758
                }
            ],
            "answer": "Ohio",
            "answerValue": 3.757099169943207,
            "question": "Which state's subreddit talked about John Kasich the most in the past year?",
            "rowIndex": 218,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(kasich)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(kasich)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(kasich)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 185166080,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "PHP",
                    "number": 2.0323716150850752
                },
                {
                    "label": "Shell",
                    "number": 0.9856678565720071
                },
                {
                    "label": "Python",
                    "number": 0.712133452277487
                },
                {
                    "label": "JavaScript",
                    "number": 0.6964614485519314
                },
                {
                    "label": "C#",
                    "number": 0.6329219340761838
                },
                {
                    "label": "Ruby",
                    "number": 0.46792699107552405
                },
                {
                    "label": "Java",
                    "number": 0.28383321141185075
                },
                {
                    "label": "C++",
                    "number": 0.15902724258994214
                },
                {
                    "label": "C",
                    "number": 0.12370343338879371
                }
            ],
            "answer": "PHP",
            "answerValue": 2.0323716150850752,
            "question": "Which programming language has the most hotfixes?",
            "rowIndex": 231,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(hotfix)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hotfix)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hotfix)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 6222796,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Shell",
                    "number": 2.544088656827748
                },
                {
                    "label": "C",
                    "number": 1.9792549342206993
                },
                {
                    "label": "C++",
                    "number": 1.4985259397898394
                },
                {
                    "label": "Python",
                    "number": 1.3936375087580928
                },
                {
                    "label": "Ruby",
                    "number": 1.1852098129215576
                },
                {
                    "label": "JavaScript",
                    "number": 1.021623260494158
                },
                {
                    "label": "C#",
                    "number": 0.9826945818551275
                },
                {
                    "label": "Java",
                    "number": 0.77542062911485
                },
                {
                    "label": "PHP",
                    "number": 0.703200578819436
                }
            ],
            "answer": "Shell",
            "answerValue": 2.544088656827748,
            "question": "Developers of which programming language call out hacks the most?",
            "rowIndex": 242,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(hack|hacks)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hack|hacks)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hack|hacks)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 6222796,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "CoffeeScript",
                    "number": 2.545631665299426
                },
                {
                    "label": "Ruby",
                    "number": 0.09480590934099663
                },
                {
                    "label": "JavaScript",
                    "number": 0.08223396656193335
                },
                {
                    "label": "DM",
                    "number": 0.06323837994768461
                },
                {
                    "label": "CSS",
                    "number": 0.06032500094257814
                },
                {
                    "label": "HTML",
                    "number": 0.05432375014955199
                },
                {
                    "label": "Emacs Lisp",
                    "number": 0.053298590548383276
                },
                {
                    "label": "TypeScript",
                    "number": 0.042514195017336345
                },
                {
                    "label": "Haskell",
                    "number": 0.03875861687107223
                },
                {
                    "label": "C",
                    "number": 0.036590967480750816
                }
            ],
            "answer": "CoffeeScript",
            "answerValue": 2.545631665299426,
            "question": "Developers of which programming language talk the most about coffee?",
            "rowIndex": 192,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(coffee|latte|espresso)\\b",
                "per": 100,
                "min_comments": 25000
            },
            "sql": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(coffee|latte|espresso)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language IS NOT NULL) repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nHAVING\n  total > 25000\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(coffee|latte|espresso)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language = 'userInput') repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 1222377998,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Shell",
                    "number": 2.1789103269454944
                },
                {
                    "label": "Objective-C",
                    "number": 2.103646671505054
                },
                {
                    "label": "TypeScript",
                    "number": 1.889519778548282
                },
                {
                    "label": "Java",
                    "number": 1.3996745120543785
                },
                {
                    "label": "Python",
                    "number": 0.8356295737662451
                },
                {
                    "label": "Scala",
                    "number": 0.7196263699887019
                },
                {
                    "label": "C",
                    "number": 0.5190208153297988
                },
                {
                    "label": "JavaScript",
                    "number": 0.24976147778871177
                },
                {
                    "label": "PHP",
                    "number": 0.19257581709919194
                },
                {
                    "label": "C++",
                    "number": 0.17227211414061194
                }
            ],
            "answer": "Shell",
            "answerValue": 2.1789103269454944,
            "question": "Developers of which programming language mention insomnia the most?",
            "rowIndex": 191,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(insomniac?)\\b",
                "per": 100000,
                "min_comments": 50000
            },
            "sql": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(insomniac?)\\b') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language IS NOT NULL) repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nHAVING\n  total > 50000\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(insomniac?)\\b') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language = 'userInput') repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Comments per 100,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 1222377991,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "DM",
                    "number": 5.763315990686712
                },
                {
                    "label": "CSS",
                    "number": 3.361862031695761
                },
                {
                    "label": "Swift",
                    "number": 3.3472663991073954
                },
                {
                    "label": "JavaScript",
                    "number": 3.085178654385062
                },
                {
                    "label": "PHP",
                    "number": 3.036920635654257
                },
                {
                    "label": "Shell",
                    "number": 2.832583425029143
                },
                {
                    "label": "CoffeeScript",
                    "number": 2.4353978671041836
                },
                {
                    "label": "HTML",
                    "number": 2.357262729703774
                },
                {
                    "label": "C#",
                    "number": 2.251885355079199
                },
                {
                    "label": "C",
                    "number": 2.161721695848612
                }
            ],
            "answer": "DM",
            "answerValue": 5.763315990686712,
            "question": "Developers of which programming language LOL the most?",
            "rowIndex": 220,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(ha(ha)+|he(he)+|lol|rofl|lmfao|lulz|lolz|rotfl|lawl|hilarious)\\b",
                "per": 1000,
                "min_comments": 50000
            },
            "sql": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(ha(ha)+|he(he)+|lol|rofl|lmfao|lulz|lolz|rotfl|lawl|hilarious)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language IS NOT NULL) repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nHAVING\n  total > 50000\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(ha(ha)+|he(he)+|lol|rofl|lmfao|lulz|lolz|rotfl|lawl|hilarious)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language = 'userInput') repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Comments per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 1222377991,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "CSS",
                    "number": 2.2433359725521247
                },
                {
                    "label": "HTML",
                    "number": 2.0662426396168883
                },
                {
                    "label": "Python",
                    "number": 1.710951552286387
                },
                {
                    "label": "C",
                    "number": 1.666056817208654
                },
                {
                    "label": "Shell",
                    "number": 1.6178409177570297
                },
                {
                    "label": "C++",
                    "number": 1.571121680962381
                },
                {
                    "label": "PHP",
                    "number": 1.3923231576271577
                },
                {
                    "label": "Ruby",
                    "number": 1.3823019875138116
                },
                {
                    "label": "JavaScript",
                    "number": 1.3480875763645719
                },
                {
                    "label": "Swift",
                    "number": 1.2656330663291646
                }
            ],
            "answer": "CSS",
            "answerValue": 2.2433359725521247,
            "question": "Developers of which programming language call out the most typos?",
            "rowIndex": 237,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(typo|typos)\\b",
                "per": 1000,
                "min_comments": 50000
            },
            "sql": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(typo|typos)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language IS NOT NULL) repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nHAVING\n  total > 50000\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(typo|typos)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language = 'userInput') repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Comments per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 1222377991,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "CoffeeScript",
                    "number": 8.203445447087777
                },
                {
                    "label": "Ruby",
                    "number": 5.4109847537547235
                },
                {
                    "label": "TypeScript",
                    "number": 3.873515546023978
                },
                {
                    "label": "C",
                    "number": 3.2698311365777326
                },
                {
                    "label": "Rust",
                    "number": 3.1019042995090897
                },
                {
                    "label": "Java",
                    "number": 2.8884192203303996
                },
                {
                    "label": "JavaScript",
                    "number": 2.1479487089829212
                },
                {
                    "label": "C++",
                    "number": 1.7916299870623642
                },
                {
                    "label": "Shell",
                    "number": 1.4707644706882088
                },
                {
                    "label": "Swift",
                    "number": 1.332245332978068
                }
            ],
            "answer": "CoffeeScript",
            "answerValue": 8.203445447087777,
            "question": "Developers of which programming language give the most 👍?",
            "rowIndex": 241,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(👍|:+1:|:thumbsup:)\\b",
                "per": 10000,
                "min_comments": 50000
            },
            "sql": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(👍|:+1:|:thumbsup:)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language IS NOT NULL) repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nHAVING\n  total > 50000\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(👍|:+1:|:thumbsup:)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language = 'userInput') repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Comments per 10,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 1222377991,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "United States",
                    "number": 129654
                },
                {
                    "label": "Japan",
                    "number": 50486
                },
                {
                    "label": "Russia",
                    "number": 48841
                },
                {
                    "label": "United Kingdom",
                    "number": 37946
                },
                {
                    "label": "Pakistan",
                    "number": 28558
                },
                {
                    "label": "Taiwan",
                    "number": 26521
                },
                {
                    "label": "Australia",
                    "number": 23346
                },
                {
                    "label": "France",
                    "number": 23058
                },
                {
                    "label": "South Korea",
                    "number": 22825
                },
                {
                    "label": "Philippines",
                    "number": 21712
                }
            ],
            "answer": "United States",
            "answerValue": 129654,
            "question": "Which country was mentioned with China the most in the news last year?",
            "rowIndex": 265,
            "approved": true,
            "params": {
                "country": "China",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'China' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'China' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 761334193,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "South Korea",
                    "number": 30196
                },
                {
                    "label": "United States",
                    "number": 13973
                },
                {
                    "label": "China",
                    "number": 13124
                },
                {
                    "label": "Russia",
                    "number": 4929
                },
                {
                    "label": "Japan",
                    "number": 4468
                },
                {
                    "label": "Iran",
                    "number": 3459
                },
                {
                    "label": "Canada",
                    "number": 1661
                },
                {
                    "label": "United Kingdom",
                    "number": 781
                },
                {
                    "label": "Cuba",
                    "number": 630
                },
                {
                    "label": "Pakistan",
                    "number": 521
                }
            ],
            "answer": "South Korea",
            "answerValue": 30196,
            "question": "Which country was mentioned with North Korea the most in the news last year?",
            "rowIndex": 264,
            "approved": true,
            "params": {
                "country": "North Korea",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'North Korea' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'North Korea' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 761310688,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Scala",
                    "number": 2.230841746964976
                },
                {
                    "label": "Java",
                    "number": 2.0231658856058745
                },
                {
                    "label": "C++",
                    "number": 0.3273170168671627
                },
                {
                    "label": "C#",
                    "number": 0.2874747261803233
                },
                {
                    "label": "TypeScript",
                    "number": 0.2834279667822423
                },
                {
                    "label": "C",
                    "number": 0.23355936689840945
                },
                {
                    "label": "HTML",
                    "number": 0.22634895895646662
                },
                {
                    "label": "Shell",
                    "number": 0.1634182745209121
                },
                {
                    "label": "DM",
                    "number": 0.1437235907901923
                },
                {
                    "label": "JavaScript",
                    "number": 0.1186367019496381
                }
            ],
            "answer": "Scala",
            "answerValue": 2.230841746964976,
            "question": "Developers of which programming language wink the most?",
            "rowIndex": 250,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(😉|;\\)|:wink:)\\b",
                "per": 10000,
                "min_comments": 50000
            },
            "sql": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(😉|;\\)|:wink:)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language IS NOT NULL) repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nHAVING\n  total > 50000\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repos.language,\n  SUM(CASE WHEN REGEXP_MATCH(JSON_EXTRACT(payload, '$.comment.body'), r'(?i)\\b(😉|;\\)|:wink:)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([githubarchive:month], 'table_id like \"2016%\"')\n  WHERE\n    type = 'IssueCommentEvent') AS comments\nJOIN (\n  SELECT\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.language') language,\n    JSON_EXTRACT_SCALAR(payload, '$.pull_request.base.repo.full_name') name\n  FROM\n    TABLE_QUERY([githubarchive:month], 'REGEXP_MATCH(table_id, \"201604|201603|201602\")')\n  WHERE\n    type = 'PullRequestEvent'\n  GROUP BY\n    language,\n    name\n  HAVING\n    language = 'userInput') repos\nON\n  repos.name = comments.repo_name\nGROUP BY\n  repos.language\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Comments per 10,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 1222377991,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "The New York Times",
                    "number": 891
                },
                {
                    "label": "The Guardian",
                    "number": 744
                },
                {
                    "label": "The Daily Telegraph",
                    "number": 361
                },
                {
                    "label": "The Times",
                    "number": 337
                },
                {
                    "label": "The Times of India",
                    "number": 325
                },
                {
                    "label": "USA Today",
                    "number": 303
                },
                {
                    "label": "The Economist",
                    "number": 272
                },
                {
                    "label": "The Washington Post",
                    "number": 235
                },
                {
                    "label": "Financial Times",
                    "number": 219
                },
                {
                    "label": "The Wall Street Journal",
                    "number": 215
                }
            ],
            "answer": "The New York Times",
            "answerValue": 891,
            "question": "What newspaper had the most popular Wikipedia page in the past month?",
            "rowIndex": 255,
            "approved": true,
            "params": {
                "freebase_tag": "newspapers",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.newspapers]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.newspapers]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 1113938493,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Time",
                    "number": 500
                },
                {
                    "label": "Der Spiegel",
                    "number": 381
                },
                {
                    "label": "Rolling Stone",
                    "number": 364
                },
                {
                    "label": "The Economist",
                    "number": 272
                },
                {
                    "label": "Playboy",
                    "number": 266
                },
                {
                    "label": "Newsweek",
                    "number": 246
                },
                {
                    "label": "Nature",
                    "number": 208
                },
                {
                    "label": "Billboard",
                    "number": 174
                },
                {
                    "label": "TWICE",
                    "number": 156
                },
                {
                    "label": "Life Magazine",
                    "number": 155
                }
            ],
            "answer": "Time",
            "answerValue": 500,
            "question": "What magazine had the most popular Wikipedia page in the past month?",
            "rowIndex": 254,
            "approved": true,
            "params": {
                "freebase_tag": "magazines",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.magazines]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.magazines]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 1112166465,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Nauru",
                    "number": 3.2859832277939414
                },
                {
                    "label": "Vanuatu",
                    "number": 2.6664702416028283
                },
                {
                    "label": "Botswana",
                    "number": 2.610099951988128
                },
                {
                    "label": "Zambia",
                    "number": 2.593852948629765
                },
                {
                    "label": "Burundi",
                    "number": 2.5023882814987792
                },
                {
                    "label": "Estonia",
                    "number": 2.423284604240748
                },
                {
                    "label": "Ghana",
                    "number": 2.378803769013764
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 2.261221734728316
                },
                {
                    "label": "Australia",
                    "number": 2.257467803139979
                },
                {
                    "label": "New Zealand",
                    "number": 2.250073006911321
                }
            ],
            "answer": "Nauru",
            "answerValue": 3.2859832277939414,
            "question": "Officials of which country made the most pessimistic statements last year?",
            "rowIndex": 291,
            "approved": true,
            "params": {
                "codes": "('012')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('012') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('012') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380821141,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Antigua and Barbuda",
                    "number": 3.7137191274562826
                },
                {
                    "label": "Luxembourg",
                    "number": 3.6345156315715688
                },
                {
                    "label": "Georgia",
                    "number": 3.5460992907801416
                },
                {
                    "label": "Comoros",
                    "number": 3.4870641169853767
                },
                {
                    "label": "Papua New Guinea",
                    "number": 3.439406627587032
                },
                {
                    "label": "Anguilla",
                    "number": 3.4033309196234613
                },
                {
                    "label": "Madagascar",
                    "number": 3.1140350877192984
                },
                {
                    "label": "Cook Islands",
                    "number": 3.056768558951965
                },
                {
                    "label": "Trinidad and Tobago",
                    "number": 3.055904522613065
                },
                {
                    "label": "Burkina Faso",
                    "number": 2.9885057471264367
                }
            ],
            "answer": "Antigua and Barbuda",
            "answerValue": 3.7137191274562826,
            "question": "Officials of which country made the most optimistic statements last year?",
            "rowIndex": 292,
            "approved": true,
            "params": {
                "codes": "('013')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('013') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('013') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380821141,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 4.09982174688057
                },
                {
                    "label": "Moldova",
                    "number": 2.610948258231645
                },
                {
                    "label": "Niger",
                    "number": 2.578350744609913
                },
                {
                    "label": "Burkina Faso",
                    "number": 2.257799671592775
                },
                {
                    "label": "Cameroon",
                    "number": 2.1497738949262497
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 2.0587242659466756
                },
                {
                    "label": "Georgia",
                    "number": 1.9250253292806485
                },
                {
                    "label": "Zambia",
                    "number": 1.8951598305759694
                },
                {
                    "label": "Swaziland",
                    "number": 1.8194380469829572
                },
                {
                    "label": "India",
                    "number": 1.781373556395753
                }
            ],
            "answer": "Benin",
            "answerValue": 4.09982174688057,
            "question": "Which country made the most demands for economic, military and/or humanitarian aid?",
            "rowIndex": 305,
            "approved": true,
            "params": {
                "codes": "('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": true,
            "rowsSearched": 380821141,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Leonardo da Vinci",
                    "number": 2399
                },
                {
                    "label": "Nikola Tesla",
                    "number": 1801
                },
                {
                    "label": "Elon Musk",
                    "number": 1740
                },
                {
                    "label": "Steve Jobs",
                    "number": 1316
                },
                {
                    "label": "Benjamin Franklin",
                    "number": 928
                },
                {
                    "label": "Karl Benz",
                    "number": 924
                },
                {
                    "label": "Thomas Edison",
                    "number": 911
                },
                {
                    "label": "Thomas Jefferson",
                    "number": 690
                },
                {
                    "label": "Tim Berners-Lee",
                    "number": 676
                },
                {
                    "label": "Alexander Graham Bell",
                    "number": 598
                }
            ],
            "answer": "Leonardo da Vinci",
            "answerValue": 2399,
            "question": "Which inventor had the most popular page in the past month?",
            "rowIndex": 285,
            "approved": true,
            "params": {
                "freebase_tag": "inventors",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.inventors]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.inventors]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 1111576240,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "USB",
                    "number": 2607
                },
                {
                    "label": "Wi-Fi",
                    "number": 2206
                },
                {
                    "label": "HDMI",
                    "number": 1192
                },
                {
                    "label": "AK-47",
                    "number": 1178
                },
                {
                    "label": "RAID",
                    "number": 1118
                },
                {
                    "label": "Internet Protocol",
                    "number": 1027
                },
                {
                    "label": "Laser",
                    "number": 582
                },
                {
                    "label": "QR code",
                    "number": 565
                },
                {
                    "label": "ARPANET",
                    "number": 547
                },
                {
                    "label": "Hashtag",
                    "number": 539
                }
            ],
            "answer": "USB",
            "answerValue": 2607,
            "question": "What invention had the most pageviews in the past month?",
            "rowIndex": 328,
            "approved": true,
            "params": {
                "freebase_tag": "invention",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.invention]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.invention]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 1111721553,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "France",
                    "number": 6075
                },
                {
                    "label": "China",
                    "number": 5886
                },
                {
                    "label": "Russia",
                    "number": 5820
                },
                {
                    "label": "Israel",
                    "number": 5624
                },
                {
                    "label": "Turkey",
                    "number": 4276
                },
                {
                    "label": "Germany",
                    "number": 4036
                },
                {
                    "label": "Syria",
                    "number": 2989
                },
                {
                    "label": "Iraq",
                    "number": 2189
                },
                {
                    "label": "Iran",
                    "number": 2056
                },
                {
                    "label": "Japan",
                    "number": 2015
                }
            ],
            "answer": "France",
            "answerValue": 6075,
            "question": "Which country was mentioned in /r/worldnews the most in the past month?",
            "rowIndex": 71,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "worldnews"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'worldnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'worldnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 70407988,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Israel",
                    "number": 1956
                },
                {
                    "label": "Russia",
                    "number": 1230
                },
                {
                    "label": "Canada",
                    "number": 830
                },
                {
                    "label": "China",
                    "number": 701
                },
                {
                    "label": "Brazil",
                    "number": 690
                },
                {
                    "label": "Germany",
                    "number": 665
                },
                {
                    "label": "France",
                    "number": 597
                },
                {
                    "label": "Iran",
                    "number": 516
                },
                {
                    "label": "Iraq",
                    "number": 506
                },
                {
                    "label": "Mexico",
                    "number": 478
                }
            ],
            "answer": "Israel",
            "answerValue": 1956,
            "question": "Which country was mentioned in /r/news the most in the past month?",
            "rowIndex": 70,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "news"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 70252989,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "JavaScript",
                    "number": 53062
                },
                {
                    "label": "Ruby",
                    "number": 39904
                },
                {
                    "label": "Java",
                    "number": 33002
                },
                {
                    "label": "Python",
                    "number": 31211
                },
                {
                    "label": "PHP",
                    "number": 29372
                },
                {
                    "label": "C",
                    "number": 15746
                },
                {
                    "label": "C++",
                    "number": 13667
                },
                {
                    "label": "Objective-C",
                    "number": 8772
                },
                {
                    "label": "C#",
                    "number": 7892
                },
                {
                    "label": "Shell",
                    "number": 7722
                }
            ],
            "answer": "JavaScript",
            "answerValue": 53062,
            "question": "Which programming language has the most projects?",
            "rowIndex": 54,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  COUNT(UNIQUE(repository_name)) total\nFROM\n [bigquery-public-data:samples.github_timeline]\nWHERE\n  repository_language IS NOT NULL\nGROUP BY\n  repository_language\nORDER BY\n  total DESC IGNORE CASE",
            "inputSQL": "SELECT\n  repository_language,\n  COUNT(UNIQUE(repository_name)) total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  repository_language = 'userInput'\nGROUP BY\n  repository_language\nORDER BY\n  total DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Projects",
            "hasPassingInputQuery": true,
            "rowsSearched": 7384600,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Thailand",
                    "number": 192
                },
                {
                    "label": "Japan",
                    "number": 171
                },
                {
                    "label": "Mexico",
                    "number": 135
                },
                {
                    "label": "China",
                    "number": 127
                },
                {
                    "label": "Canada",
                    "number": 124
                },
                {
                    "label": "Italy",
                    "number": 121
                },
                {
                    "label": "Vietnam",
                    "number": 116
                },
                {
                    "label": "France",
                    "number": 95
                },
                {
                    "label": "Germany",
                    "number": 94
                },
                {
                    "label": "India",
                    "number": 89
                }
            ],
            "answer": "Thailand",
            "answerValue": 192,
            "question": "Which country was discussed the most in /r/travel in the past month?",
            "rowIndex": 59,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "travel"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69684764,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "San Francisco",
                    "number": 1565
                },
                {
                    "label": "New York City",
                    "number": 796
                },
                {
                    "label": "Detroit",
                    "number": 538
                },
                {
                    "label": "Dallas",
                    "number": 279
                },
                {
                    "label": "Orlando",
                    "number": 213
                },
                {
                    "label": "Atlanta",
                    "number": 168
                },
                {
                    "label": "Seattle",
                    "number": 167
                },
                {
                    "label": "Houston",
                    "number": 160
                },
                {
                    "label": "Miami",
                    "number": 159
                },
                {
                    "label": "Washington, D.C.",
                    "number": 159
                }
            ],
            "answer": "San Francisco",
            "answerValue": 1565,
            "question": "Which city was mentioned the most in /r/news in the past month?",
            "rowIndex": 99,
            "approved": true,
            "params": {
                "freebase_tag": "cities",
                "subreddit": "news",
                "top_wiki": 75,
                "num_common_words": 2000
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    topic_wiki.title AS title,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name AS name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name,\n    title\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nJOIN (\n  SELECT\n    sub,\n    obj AS alias\n  FROM\n    [fh-bigquery:freebase20140119.triples_lang_en]\n  WHERE\n    (pred = '/common/topic/alias'\n      OR pred = '/type/object/name')\n    AND obj NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      2000)) aliases\nON\n  aliases.sub = pop_topic.mid\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', aliases.alias, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    topic_wiki.title AS title,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name AS name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_20160805_12] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name,\n    title\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nJOIN (\n  SELECT\n    sub,\n    obj AS alias,\n    CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n    SUM(input) OVER (PARTITION BY sub) AS input_alias\n  FROM\n    [fh-bigquery:freebase20140119.triples_lang_en]\n  WHERE\n    (pred = '/common/topic/alias'\n      OR pred = '/type/object/name')\n    AND obj NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      2000)) aliases\nON\n  aliases.sub = pop_topic.mid\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  aliases.input_alias > 0\n  AND comments.body CONTAINS CONCAT(' ', aliases.alias, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 1336929243,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Barack Obama",
                    "number": 8300
                },
                {
                    "label": "Ronald Reagan",
                    "number": 2417
                },
                {
                    "label": "Bill Clinton",
                    "number": 2389
                },
                {
                    "label": "Abraham Lincoln",
                    "number": 1663
                },
                {
                    "label": "Richard Nixon",
                    "number": 1232
                },
                {
                    "label": "George Washington",
                    "number": 1048
                },
                {
                    "label": "Jimmy Carter",
                    "number": 1040
                },
                {
                    "label": "Theodore Roosevelt",
                    "number": 915
                },
                {
                    "label": "Gerald Ford",
                    "number": 691
                },
                {
                    "label": "Thomas Jefferson",
                    "number": 690
                }
            ],
            "answer": "Barack Obama",
            "answerValue": 8300,
            "question": "Which U.S. President had the most popular page in the past month?",
            "rowIndex": 141,
            "approved": true,
            "params": {
                "freebase_tag": "presidents",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.presidents]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.presidents]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_20160805_12] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 1110742400,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Indian Institutes of Management",
                    "number": 57
                },
                {
                    "label": "Manchester Business School",
                    "number": 23
                },
                {
                    "label": "London Business School",
                    "number": 21
                },
                {
                    "label": "IESE Business School",
                    "number": 19
                },
                {
                    "label": "INSEAD",
                    "number": 19
                },
                {
                    "label": "Harvard Business School",
                    "number": 16
                },
                {
                    "label": "Eastern Institute for Integrated Learning in Management University",
                    "number": 10
                },
                {
                    "label": "Columbia Business School",
                    "number": 10
                },
                {
                    "label": "MIT Sloan School of Management",
                    "number": 9
                },
                {
                    "label": "IE Business School",
                    "number": 9
                }
            ],
            "answer": "Indian Institutes of Management",
            "answerValue": 57,
            "question": "Which business school had the most popular page in the past month?",
            "rowIndex": 351,
            "approved": true,
            "params": {
                "wikidata_tag": "business_schools_clean",
                "substring": true
            },
            "sql": "\n  SELECT\n    replace(school.name, \"_\", \" \") AS name,\n    SUM(requests) AS total\n  FROM\n    [wikidata_tags.business_schools_clean] school\n  JOIN EACH (\n    SELECT\n      title,\n      requests\n    FROM\n      [fh-bigquery:wikipedia.pagecounts_20160805_12]) views\n  ON\n    views.title = name\n  GROUP BY\n    name\n  ORDER BY\n    total DESC IGNORE case\n",
            "inputSQL": "\n   SELECT\n      replace(school.name, \"_\", \" \") AS name,\n      SUM(requests) AS total\n    FROM\n      [wikidata_tags.business_schools_clean] school\n    JOIN EACH (\n      SELECT\n        title,\n        requests\n      FROM\n        [fh-bigquery:wikipedia.pagecounts_20160805_12]\n      WHERE\n        title = 'userInput'\nOR title CONTAINS CONCAT('_', replace('userInput', ' ', '_' ))\nOR title CONTAINS CONCAT(replace('userInput', ' ', '_' ), '_')\n ) views\n    ON\n      views.title = name\n    GROUP BY\n      name\n    ORDER BY\n      total DESC IGNORE case\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 13964178,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Pikachu",
                    "number": 242
                },
                {
                    "label": "Volbeat",
                    "number": 89
                },
                {
                    "label": "Mewtwo",
                    "number": 89
                },
                {
                    "label": "Golem",
                    "number": 64
                },
                {
                    "label": "MissingNo.",
                    "number": 37
                },
                {
                    "label": "Eevee",
                    "number": 29
                },
                {
                    "label": "Electrode",
                    "number": 27
                },
                {
                    "label": "Jynx",
                    "number": 27
                },
                {
                    "label": "Articuno",
                    "number": 25
                },
                {
                    "label": "Snorlax",
                    "number": 24
                }
            ],
            "answer": "Pikachu",
            "answerValue": 242,
            "question": "What was the most popular Pokemon species in the past month?",
            "rowIndex": 355,
            "approved": true,
            "params": {
                "wikidata_tag": "pokemon_species",
                "substring": true
            },
            "sql": "\n  SELECT\n    replace(school.name, \"_\", \" \") AS name,\n    SUM(requests) AS total\n  FROM\n    [wikidata_tags.pokemon_species] school\n  JOIN EACH (\n    SELECT\n      title,\n      requests\n    FROM\n      [fh-bigquery:wikipedia.pagecounts_20160805_12]) views\n  ON\n    views.title = name\n  GROUP BY\n    name\n  ORDER BY\n    total DESC IGNORE case\n",
            "inputSQL": "\n   SELECT\n      replace(school.name, \"_\", \" \") AS name,\n      SUM(requests) AS total\n    FROM\n      [wikidata_tags.pokemon_species] school\n    JOIN EACH (\n      SELECT\n        title,\n        requests\n      FROM\n        [fh-bigquery:wikipedia.pagecounts_20160805_12]\n      WHERE\n        title = 'userInput'\nOR title CONTAINS CONCAT('_', replace('userInput', ' ', '_' ))\nOR title CONTAINS CONCAT(replace('userInput', ' ', '_' ), '_')\n ) views\n    ON\n      views.title = name\n    GROUP BY\n      name\n    ORDER BY\n      total DESC IGNORE case\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 13964854,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Northern Ireland",
                    "number": 9.275732554780044
                },
                {
                    "label": "Ireland",
                    "number": 3.3050261626880206
                },
                {
                    "label": "Spain",
                    "number": 3.0110677083333335
                },
                {
                    "label": "Polska",
                    "number": 2.3497089975779923
                },
                {
                    "label": "Norway",
                    "number": 2.144607843137255
                },
                {
                    "label": "Switzerland",
                    "number": 2.04648443210057
                },
                {
                    "label": "Poland",
                    "number": 1.9843342036553524
                },
                {
                    "label": "Italy",
                    "number": 1.8520973540352328
                },
                {
                    "label": "Iceland",
                    "number": 1.8433765573353673
                },
                {
                    "label": "Germany",
                    "number": 1.8241739532281798
                }
            ],
            "answer": "Northern Ireland",
            "answerValue": 9.275732554780044,
            "question": "Other than the United Kingdom, which country's subreddit mentions “Brexit” the most?",
            "rowIndex": 357,
            "approved": true,
            "params": {
                "term": "brexit",
                "per": 1000,
                "filter_country": "United Kingdom"
            },
            "sql": "\n    SELECT\n      countries.country AS country,\n      SUM(CASE WHEN comments.body CONTAINS 'brexit' THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\n    FROM (\n      SELECT\n        *\n      FROM\n        TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"2016\")')) comments\n    JOIN\n      [subreddits.european_countries] countries\n    ON\n      countries.subreddit = comments.subreddit\n    \n        WHERE country != 'United Kingdom'\n    GROUP BY\n      country\n    ORDER BY\n      per DESC IGNORE CASE\n",
            "inputSQL": "\n    SELECT\n      countries.country AS country,\n      SUM(CASE WHEN comments.body CONTAINS 'brexit' THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\n    FROM (\n      SELECT\n        *\n      FROM\n        TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"2016\")')) comments\n    JOIN\n      [subreddits.european_countries] countries\n    ON\n      countries.subreddit = comments.subreddit\n    \n        WHERE country != 'United Kingdom' AND country = 'userInput'\n    GROUP BY\n      country\n    ORDER BY\n      per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 517221839,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 23
                },
                {
                    "label": "Germany",
                    "number": 14
                },
                {
                    "label": "Canada",
                    "number": 9
                },
                {
                    "label": "Japan",
                    "number": 9
                },
                {
                    "label": "Russia",
                    "number": 8
                },
                {
                    "label": "Greece",
                    "number": 8
                },
                {
                    "label": "Syria",
                    "number": 6
                },
                {
                    "label": "Mexico",
                    "number": 6
                },
                {
                    "label": "France",
                    "number": 4
                },
                {
                    "label": "Spain",
                    "number": 4
                }
            ],
            "answer": "China",
            "answerValue": 23,
            "question": "What country was mentioned the most in /r/economy?\n",
            "rowIndex": 356,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "economy"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'economy') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'economy') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69658916,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Netflix",
                    "number": 122
                },
                {
                    "label": "Wells Fargo",
                    "number": 119
                },
                {
                    "label": "Walmart",
                    "number": 107
                },
                {
                    "label": "Facebook",
                    "number": 87
                },
                {
                    "label": "Costco",
                    "number": 84
                },
                {
                    "label": "USAA",
                    "number": 79
                },
                {
                    "label": "Starbucks",
                    "number": 63
                },
                {
                    "label": "American Express",
                    "number": 50
                },
                {
                    "label": "CarMax",
                    "number": 43
                },
                {
                    "label": "Home Depot",
                    "number": 33
                }
            ],
            "answer": "Netflix",
            "answerValue": 122,
            "question": "Which Fortune 500 company was discussed the most in /r/personalfinance in the past month?",
            "rowIndex": 361,
            "approved": true,
            "params": {
                "wikidata_tag": "fortune_500",
                "subreddit": "personalfinance",
                "num_common_words": 10000,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.fortune_500] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'personalfinance') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      10000) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.fortune_500]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'personalfinance') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69849810,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Apple",
                    "number": 116
                },
                {
                    "label": "Google",
                    "number": 98
                },
                {
                    "label": "Facebook",
                    "number": 59
                },
                {
                    "label": "Walmart",
                    "number": 37
                },
                {
                    "label": "Target",
                    "number": 21
                },
                {
                    "label": "Netflix",
                    "number": 18
                },
                {
                    "label": "Comcast",
                    "number": 17
                },
                {
                    "label": "Visa",
                    "number": 17
                },
                {
                    "label": "Gap",
                    "number": 16
                },
                {
                    "label": "Aetna",
                    "number": 13
                }
            ],
            "answer": "Apple",
            "answerValue": 116,
            "question": "Which Fortune 500 company was mentioned the most in /r/business in the past month?",
            "rowIndex": 365,
            "approved": true,
            "params": {
                "wikidata_tag": "fortune_500",
                "subreddit": "business",
                "num_common_words": 0,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.fortune_500] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      0) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.fortune_500]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69665828,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Go",
                    "number": 659
                },
                {
                    "label": "LESS",
                    "number": 586
                },
                {
                    "label": "JavaScript",
                    "number": 383
                },
                {
                    "label": "HTML",
                    "number": 298
                },
                {
                    "label": "PHP",
                    "number": 280
                },
                {
                    "label": "SMALL",
                    "number": 255
                },
                {
                    "label": "BASIC",
                    "number": 239
                },
                {
                    "label": "Cool",
                    "number": 136
                },
                {
                    "label": "FACT",
                    "number": 126
                },
                {
                    "label": "Java",
                    "number": 98
                }
            ],
            "answer": "Go",
            "answerValue": 659,
            "question": "Which programming language was mentioned the most in /r/webdev in the past month?",
            "rowIndex": 364,
            "approved": true,
            "params": {
                "wikidata_tag": "programming_languages",
                "subreddit": "webdev",
                "num_common_words": 0,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.programming_languages] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'webdev') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      0) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.programming_languages]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'webdev') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69674897,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "New York",
                    "number": 5.9523809523809526
                },
                {
                    "label": "New Mexico",
                    "number": 2.0938023450586263
                },
                {
                    "label": "South Dakota",
                    "number": 2
                },
                {
                    "label": "Hawaii",
                    "number": 1.9325005176340673
                },
                {
                    "label": "Massachusetts",
                    "number": 1.5374103177314657
                },
                {
                    "label": "Tennessee",
                    "number": 1.530221882172915
                },
                {
                    "label": "Montana",
                    "number": 1.013787510137875
                },
                {
                    "label": "Maine",
                    "number": 0.9542812527110263
                },
                {
                    "label": "California",
                    "number": 0.9331350421368793
                },
                {
                    "label": "Wyoming",
                    "number": 0.8003201280512204
                }
            ],
            "answer": "New York",
            "answerValue": 5.9523809523809526,
            "question": "Which state's subreddit talked about Airbnb the most in the past year?\n",
            "rowIndex": 366,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(airbnb)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "New York",
                    "number": 5.9523809523809526
                },
                {
                    "label": "New Jersey",
                    "number": 5.019791291831594
                },
                {
                    "label": "Massachusetts",
                    "number": 4.099760847283909
                },
                {
                    "label": "Hawaii",
                    "number": 3.4854027193043
                },
                {
                    "label": "Delaware",
                    "number": 2.825488883931891
                },
                {
                    "label": "Montana",
                    "number": 2.635847526358475
                },
                {
                    "label": "Florida",
                    "number": 2.570515492566347
                },
                {
                    "label": "Texas",
                    "number": 2.5424073546759955
                },
                {
                    "label": "Connecticut",
                    "number": 2.325789426603453
                },
                {
                    "label": "Pennsylvania",
                    "number": 2.1306818181818183
                }
            ],
            "answer": "New York",
            "answerValue": 5.9523809523809526,
            "question": "Which state's subreddit talked about Lyft and Uber the most in the past year?",
            "rowIndex": 367,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(lyft|uber)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(lyft|uber)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(lyft|uber)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Hawaii",
                    "number": 2.6571882117468424
                },
                {
                    "label": "Mississippi",
                    "number": 2.1058173203474597
                },
                {
                    "label": "Nevada",
                    "number": 1.6528925619834711
                },
                {
                    "label": "Rhode Island",
                    "number": 1.40597539543058
                },
                {
                    "label": "New York",
                    "number": 1.2755102040816326
                },
                {
                    "label": "New Mexico",
                    "number": 1.256281407035176
                },
                {
                    "label": "California",
                    "number": 1.1955792727378765
                },
                {
                    "label": "Utah",
                    "number": 1.1529592621060722
                },
                {
                    "label": "South Dakota",
                    "number": 1
                },
                {
                    "label": "New Jersey",
                    "number": 0.8276358402302987
                }
            ],
            "answer": "Hawaii",
            "answerValue": 2.6571882117468424,
            "question": "Which state’s subreddit talked about Yelp the most in the past year?",
            "rowIndex": 368,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(yelp)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(yelp)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(yelp)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Kansas",
                    "number": 4.281604332374344
                },
                {
                    "label": "Nevada",
                    "number": 2.809917355371901
                },
                {
                    "label": "North Carolina",
                    "number": 2.7074127092798905
                },
                {
                    "label": "Wisconsin",
                    "number": 2.690831241694965
                },
                {
                    "label": "Illinois",
                    "number": 2.5374577090381827
                },
                {
                    "label": "Pennsylvania",
                    "number": 2.509469696969697
                },
                {
                    "label": "Indiana",
                    "number": 2.4420211949009367
                },
                {
                    "label": "Kentucky",
                    "number": 2.3035613340870547
                },
                {
                    "label": "Ohio",
                    "number": 2.2552204176334105
                },
                {
                    "label": "Missouri",
                    "number": 1.9347037484885128
                }
            ],
            "answer": "Kansas",
            "answerValue": 4.281604332374344,
            "question": "Which state’s subreddit talked about Republicans the most in the past year?",
            "rowIndex": 369,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(republican|republicans)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(republican|republicans)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(republican|republicans)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Illinois",
                    "number": 2.6341227646205896
                },
                {
                    "label": "Kansas",
                    "number": 1.7092570654933152
                },
                {
                    "label": "North Carolina",
                    "number": 1.618223688305222
                },
                {
                    "label": "Pennsylvania",
                    "number": 1.4914772727272727
                },
                {
                    "label": "Maryland",
                    "number": 1.381621975147155
                },
                {
                    "label": "New York",
                    "number": 1.3180272108843538
                },
                {
                    "label": "Kentucky",
                    "number": 1.3143018654607124
                },
                {
                    "label": "Wisconsin",
                    "number": 1.3029676657315812
                },
                {
                    "label": "North Dakota",
                    "number": 1.2987012987012987
                },
                {
                    "label": "Indiana",
                    "number": 1.2594071571187222
                }
            ],
            "answer": "Illinois",
            "answerValue": 2.6341227646205896,
            "question": "Which state’s subreddit talked about Democrats the most in the past year?",
            "rowIndex": 370,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(democrat|democrats)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(democrat|democrats)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(democrat|democrats)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "NBC",
                    "number": 1369
                },
                {
                    "label": "HBO",
                    "number": 625
                },
                {
                    "label": "Fox",
                    "number": 518
                },
                {
                    "label": "CNN",
                    "number": 459
                },
                {
                    "label": "Comedy Central",
                    "number": 333
                },
                {
                    "label": "BET",
                    "number": 321
                },
                {
                    "label": "MTV",
                    "number": 290
                },
                {
                    "label": "CBS",
                    "number": 260
                },
                {
                    "label": "Pop",
                    "number": 238
                },
                {
                    "label": "ABC",
                    "number": 153
                }
            ],
            "answer": "NBC",
            "answerValue": 1369,
            "question": "What network was mentioned the most in /r/television in the past month?",
            "rowIndex": 374,
            "approved": true,
            "params": {
                "wikidata_tag": "tv_stations",
                "subreddit": "television",
                "num_common_words": 1000,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.tv_stations] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'television') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      1000) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.tv_stations]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'television') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69837491,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Vermont",
                    "number": 6.676124509722106
                },
                {
                    "label": "Maryland",
                    "number": 4.905166775670373
                },
                {
                    "label": "Virginia",
                    "number": 4.523863379325944
                },
                {
                    "label": "Wyoming",
                    "number": 4.001600640256102
                },
                {
                    "label": "Delaware",
                    "number": 3.71774853148933
                },
                {
                    "label": "Rhode Island",
                    "number": 3.51493848857645
                },
                {
                    "label": "Hawaii",
                    "number": 3.450893781489406
                },
                {
                    "label": "New Jersey",
                    "number": 3.0586541921554518
                },
                {
                    "label": "Washington",
                    "number": 2.8612303290414878
                },
                {
                    "label": "Ohio",
                    "number": 2.7842227378190256
                }
            ],
            "answer": "Vermont",
            "answerValue": 6.676124509722106,
            "question": "Which state’s subreddit talked about telecommuting the most in the past year?",
            "rowIndex": 376,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(telecommuting|telecommute|work+from+home|WFH)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(telecommuting|telecommute|work+from+home|WFH)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(telecommuting|telecommute|work+from+home|WFH)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": true,
            "rowsSearched": 517198987,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Cayman Islands",
                    "number": 4.8489010989010985
                },
                {
                    "label": "Norway",
                    "number": 3.0012463883066114
                },
                {
                    "label": "Luxembourg",
                    "number": 2.998922262311982
                },
                {
                    "label": "Liechtenstein",
                    "number": 2.8724114896459585
                },
                {
                    "label": "Mauritius",
                    "number": 2.7951933124346917
                },
                {
                    "label": "Macao",
                    "number": 2.526595744680851
                },
                {
                    "label": "Qatar",
                    "number": 2.4570263183451493
                },
                {
                    "label": "Malawi",
                    "number": 2.3997370151216306
                },
                {
                    "label": "Cook Islands",
                    "number": 2.3615950445218736
                },
                {
                    "label": "New Zealand",
                    "number": 2.2336839816249423
                }
            ],
            "answer": "Cayman Islands",
            "answerValue": 4.8489010989010985,
            "question": "Which country provided the most proportional economic aid so far this year?",
            "rowIndex": 379,
            "approved": true,
            "params": {
                "codes": "('071')",
                "relation": "Actor1CountryCode",
                "year": 2016,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('071') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2016\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('071') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2016\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 408495444,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Chad",
                    "number": 9.855778378172685
                },
                {
                    "label": "Iraq",
                    "number": 9.0302018515708
                },
                {
                    "label": "Benin",
                    "number": 8.626887131560029
                },
                {
                    "label": "Niger",
                    "number": 8.12823281987154
                },
                {
                    "label": "Lithuania",
                    "number": 7.9423137213919945
                },
                {
                    "label": "Saudi Arabia",
                    "number": 7.880511408292686
                },
                {
                    "label": "Cameroon",
                    "number": 6.659639708700651
                },
                {
                    "label": "Afghanistan",
                    "number": 6.601901051619346
                },
                {
                    "label": "Czech Republic",
                    "number": 6.126169928284916
                },
                {
                    "label": "Djibouti",
                    "number": 6.1149271234712685
                }
            ],
            "answer": "Chad",
            "answerValue": 9.855778378172685,
            "question": "Which country provided the most proportional military aid so far this year?",
            "rowIndex": 380,
            "approved": true,
            "params": {
                "codes": "('072')",
                "relation": "Actor1CountryCode",
                "year": 2016,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('072') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2016\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('072') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2016\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": true,
            "rowsSearched": 408495444,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Apple",
                    "number": 344
                },
                {
                    "label": "Google",
                    "number": 292
                },
                {
                    "label": "Target",
                    "number": 125
                },
                {
                    "label": "Facebook",
                    "number": 53
                },
                {
                    "label": "Microsoft",
                    "number": 52
                },
                {
                    "label": "Starbucks",
                    "number": 28
                },
                {
                    "label": "UPS",
                    "number": 26
                },
                {
                    "label": "Netflix",
                    "number": 25
                },
                {
                    "label": "Ball",
                    "number": 24
                },
                {
                    "label": "Disney",
                    "number": 22
                }
            ],
            "answer": "Apple",
            "answerValue": 344,
            "question": "What Fortune 500 company was mentioned the most in /r/investing in the past year?",
            "rowIndex": 378,
            "approved": true,
            "params": {
                "wikidata_tag": "fortune_500",
                "subreddit": "investing",
                "num_common_words": 500,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.fortune_500] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'investing') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      500) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.fortune_500]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'investing') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69691493,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Israel",
                    "number": 251
                },
                {
                    "label": "Iraq",
                    "number": 192
                },
                {
                    "label": "Russia",
                    "number": 163
                },
                {
                    "label": "Syria",
                    "number": 77
                },
                {
                    "label": "Iran",
                    "number": 63
                },
                {
                    "label": "Germany",
                    "number": 43
                },
                {
                    "label": "China",
                    "number": 42
                },
                {
                    "label": "Saudi Arabia",
                    "number": 36
                },
                {
                    "label": "Libya",
                    "number": 36
                },
                {
                    "label": "Turkey",
                    "number": 32
                }
            ],
            "answer": "Israel",
            "answerValue": 251,
            "question": "Which country was mentioned the most in /r/worldpolitics in the past month?",
            "rowIndex": 384,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "worldpolitics"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'worldpolitics') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'worldpolitics') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69671230,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Netflix",
                    "number": 382
                },
                {
                    "label": "Opera",
                    "number": 370
                },
                {
                    "label": "BitTorrent",
                    "number": 297
                },
                {
                    "label": "MATLAB",
                    "number": 200
                },
                {
                    "label": "Dropbox",
                    "number": 119
                },
                {
                    "label": "Dolphin",
                    "number": 110
                },
                {
                    "label": "ACID",
                    "number": 103
                },
                {
                    "label": "Hyper-V",
                    "number": 103
                },
                {
                    "label": "PuTTY",
                    "number": 94
                },
                {
                    "label": "Osiris",
                    "number": 89
                }
            ],
            "answer": "Netflix",
            "answerValue": 382,
            "question": "Which software application had the most popular page in the last month?",
            "rowIndex": 385,
            "approved": true,
            "params": {
                "wikidata_tag": "software_applications",
                "substring": true
            },
            "sql": "\n  SELECT\n    replace(school.name, \"_\", \" \") AS name,\n    SUM(requests) AS total\n  FROM\n    [wikidata_tags.software_applications] school\n  JOIN EACH (\n    SELECT\n      title,\n      requests\n    FROM\n      [fh-bigquery:wikipedia.pagecounts_20160805_12]) views\n  ON\n    views.title = name\n  GROUP BY\n    name\n  ORDER BY\n    total DESC IGNORE case\n",
            "inputSQL": "\n   SELECT\n      replace(school.name, \"_\", \" \") AS name,\n      SUM(requests) AS total\n    FROM\n      [wikidata_tags.software_applications] school\n    JOIN EACH (\n      SELECT\n        title,\n        requests\n      FROM\n        [fh-bigquery:wikipedia.pagecounts_20160805_12]\n      WHERE\n        title = 'userInput'\nOR title CONTAINS CONCAT('_', replace('userInput', ' ', '_' ))\nOR title CONTAINS CONCAT(replace('userInput', ' ', '_' ), '_')\n ) views\n    ON\n      views.title = name\n    GROUP BY\n      name\n    ORDER BY\n      total DESC IGNORE case\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": true,
            "rowsSearched": 13964848,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Ford",
                    "number": 1588
                },
                {
                    "label": "BMW",
                    "number": 1305
                },
                {
                    "label": "Honda",
                    "number": 1128
                },
                {
                    "label": "Toyota",
                    "number": 985
                },
                {
                    "label": "Mazda",
                    "number": 740
                },
                {
                    "label": "Audi",
                    "number": 674
                },
                {
                    "label": "Subaru",
                    "number": 643
                },
                {
                    "label": "Porsche",
                    "number": 605
                },
                {
                    "label": "Nissan",
                    "number": 507
                },
                {
                    "label": "Seat",
                    "number": 499
                }
            ],
            "answer": "Ford",
            "answerValue": 1588,
            "question": "Which car company was mentioned the most in /r/cars in the past month?",
            "rowIndex": 400,
            "approved": true,
            "params": {
                "wikidata_tag": "cars",
                "subreddit": "cars",
                "substring": true,
                "num_common_words": 0,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.cars] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'cars') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      0) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.cars]\n  WHERE\n    name = 'userInput'\n      OR name CONTAINS CONCAT(' ', 'userInput')\n      OR name CONTAINS CONCAT('userInput', ' ')\n) topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'cars') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69774524,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Canada",
                    "number": 32
                },
                {
                    "label": "India",
                    "number": 25
                },
                {
                    "label": "China",
                    "number": 24
                },
                {
                    "label": "France",
                    "number": 12
                },
                {
                    "label": "Singapore",
                    "number": 12
                },
                {
                    "label": "Germany",
                    "number": 11
                },
                {
                    "label": "Australia",
                    "number": 11
                },
                {
                    "label": "Mexico",
                    "number": 6
                },
                {
                    "label": "Norway",
                    "number": 4
                },
                {
                    "label": "Russia",
                    "number": 4
                }
            ],
            "answer": "Canada",
            "answerValue": 32,
            "question": "Which country was mentioned the most in /r/Business in the past month?",
            "rowIndex": 403,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "business"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69665518,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Google",
                    "number": 86
                },
                {
                    "label": "Target",
                    "number": 71
                },
                {
                    "label": "Facebook",
                    "number": 49
                },
                {
                    "label": "Ball",
                    "number": 48
                },
                {
                    "label": "Progressive",
                    "number": 42
                },
                {
                    "label": "Apple",
                    "number": 28
                },
                {
                    "label": "Southern",
                    "number": 27
                },
                {
                    "label": "Gap",
                    "number": 25
                },
                {
                    "label": "Walmart",
                    "number": 20
                },
                {
                    "label": "Netflix",
                    "number": 12
                }
            ],
            "answer": "Google",
            "answerValue": 86,
            "question": "Which Fortune 500 company was mentioned the most in /r/bestof in the past month?",
            "rowIndex": 402,
            "approved": true,
            "params": {
                "wikidata_tag": "fortune_500",
                "subreddit": "bestof",
                "num_common_words": 500,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.fortune_500] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'bestof') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      500) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.fortune_500]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'bestof') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69701028,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Facebook",
                    "number": 89
                },
                {
                    "label": "Tesla",
                    "number": 18
                },
                {
                    "label": "Uber",
                    "number": 14
                },
                {
                    "label": "Nexus",
                    "number": 13
                },
                {
                    "label": "Deere",
                    "number": 6
                },
                {
                    "label": "Lyft",
                    "number": 5
                },
                {
                    "label": "Razer",
                    "number": 5
                },
                {
                    "label": "The Sun",
                    "number": 4
                },
                {
                    "label": "Twitter",
                    "number": 4
                },
                {
                    "label": "The Popular",
                    "number": 4
                }
            ],
            "answer": "Facebook",
            "answerValue": 89,
            "question": "What company was mentioned the most in /r/tech in the past month?",
            "rowIndex": 350,
            "approved": true,
            "params": {
                "wikidata_tag": "businesses_clean",
                "subreddit": "tech",
                "num_common_words": 10000,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.businesses_clean] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'tech') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      10000) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.businesses_clean]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'tech') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69767011,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Dragonite",
                    "number": 4506
                },
                {
                    "label": "Snorlax",
                    "number": 4022
                },
                {
                    "label": "Pidgey",
                    "number": 3868
                },
                {
                    "label": "Eevee",
                    "number": 3325
                },
                {
                    "label": "Magikarp",
                    "number": 2988
                },
                {
                    "label": "Dratini",
                    "number": 2727
                },
                {
                    "label": "Vaporeon",
                    "number": 2495
                },
                {
                    "label": "Pikachu",
                    "number": 2062
                },
                {
                    "label": "Lapras",
                    "number": 1976
                },
                {
                    "label": "Gyarados",
                    "number": 1558
                }
            ],
            "answer": "Dragonite",
            "answerValue": 4506,
            "question": "Which Pokemon species was mentioned the most in /r/pokemongo in the past month?",
            "rowIndex": 358,
            "approved": true,
            "params": {
                "wikidata_tag": "pokemon_species",
                "subreddit": "pokemongo",
                "num_common_words": 0,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.pokemon_species] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'pokemongo') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      0) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.pokemon_species]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'pokemongo') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 70487291,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Manager",
                    "number": 435
                },
                {
                    "label": "Boss",
                    "number": 389
                },
                {
                    "label": "Sales",
                    "number": 189
                },
                {
                    "label": "employee",
                    "number": 186
                },
                {
                    "label": "Major",
                    "number": 172
                },
                {
                    "label": "Internship",
                    "number": 145
                },
                {
                    "label": "Marketing",
                    "number": 138
                },
                {
                    "label": "General",
                    "number": 135
                },
                {
                    "label": "Support",
                    "number": 105
                },
                {
                    "label": "Analyst",
                    "number": 87
                }
            ],
            "answer": "Manager",
            "answerValue": 435,
            "question": "Which job was discussed the most in /r/jobs in the past month?",
            "rowIndex": 362,
            "approved": true,
            "params": {
                "freebase_tag": "job_titles",
                "subreddit": "jobs"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.job_titles] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'jobs') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.job_titles]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'jobs') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69694225,
            "warnings": {}
        },
        {
            "top10": [
                {
                    "label": "Facebook",
                    "number": 59
                },
                {
                    "label": "Tesla",
                    "number": 55
                },
                {
                    "label": "Uber",
                    "number": 27
                },
                {
                    "label": "Sears",
                    "number": 26
                },
                {
                    "label": "Twitter",
                    "number": 15
                },
                {
                    "label": "Aetna",
                    "number": 13
                },
                {
                    "label": "Airbnb",
                    "number": 12
                },
                {
                    "label": "Mylan",
                    "number": 9
                },
                {
                    "label": "Dime",
                    "number": 8
                },
                {
                    "label": "LinkedIn",
                    "number": 7
                }
            ],
            "answer": "Facebook",
            "answerValue": 59,
            "question": "What company was mentioned the most in /r/Business in the past month?",
            "rowIndex": 349,
            "approved": true,
            "params": {
                "wikidata_tag": "businesses_clean",
                "subreddit": "business",
                "num_common_words": 10000,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [wikidata_tags.businesses_clean] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  topic.name NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      10000) AND\n      comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [wikidata_tags.businesses_clean]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_08]\n  WHERE\n    subreddit = 'business') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": true,
            "rowsSearched": 69773233,
            "warnings": {}
        }
    ],
    "total": 81
}